/*
Copyright 2025 The KServe Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

package trafficpolicy

import (
	"context"

	egv1a1 "github.com/envoyproxy/gateway/api/v1alpha1"
	"github.com/go-logr/logr"
	"k8s.io/apimachinery/pkg/api/equality"
	apierr "k8s.io/apimachinery/pkg/api/errors"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"sigs.k8s.io/controller-runtime/pkg/client"
	"sigs.k8s.io/controller-runtime/pkg/controller/controllerutil"

	"github.com/kserve/kserve/pkg/apis/serving/v1beta1"
)

// BackendTrafficPolicyReconciler reconciles the TrafficPolicy resource for the InferenceService
type BackendTrafficPolicyReconciler struct {
	client client.Client
	isvc   *v1beta1.InferenceService
	log    logr.Logger
}

// NewBackendTrafficPolicyReconciler creates a new BackendTrafficPolicyReconciler
func NewBackendTrafficPolicyReconciler(client client.Client, isvc *v1beta1.InferenceService, logger logr.Logger) *BackendTrafficPolicyReconciler {
	return &BackendTrafficPolicyReconciler{
		client: client,
		isvc:   isvc,
		log:    logger,
	}
}

// Reconcile reconciles the TrafficPolicy resource for the InferenceService
func (r *BackendTrafficPolicyReconciler) Reconcile(ctx context.Context) error {
	desired := r.createTrafficPolicy()
	if err := controllerutil.SetControllerReference(r.isvc, desired, r.client.Scheme()); err != nil {
		r.log.Error(err, "Failed to set controller reference for BackendTrafficPolicy", "name", desired.Name, "namespace", desired.Namespace)
	}
	existing := &egv1a1.BackendTrafficPolicy{}
	if err := r.client.Get(ctx, client.ObjectKey{Namespace: r.isvc.Namespace, Name: desired.Name}, existing); err != nil {
		if apierr.IsNotFound(err) {
			r.log.Info("Creating BackendTrafficPolicy", "name", desired.Name, "namespace", desired.Namespace)
			if err := r.client.Create(ctx, desired); err != nil {
				r.log.Error(err, "Failed to create BackendTrafficPolicy", "name", desired.Name, "namespace", desired.Namespace)
				return err
			}
			return nil
		}
		return err
	}

	// Set ResourceVersion which is required for update operation.
	desired.ResourceVersion = existing.ResourceVersion
	// Do a dry-run update to avoid diffs generated by default values.
	if equality.Semantic.DeepEqual(existing.Spec, desired.Spec) {
		r.log.Info("BackendTrafficPolicy is up-to-date", "name", desired.Name, "namespace", desired.Namespace)
		return nil
	}
	r.log.Info("Updating BackendTrafficPolicy", "name", desired.Name, "namespace", desired.Namespace)
	if err := r.client.Update(ctx, desired); err != nil {
		r.log.Error(err, "Failed to update BackendTrafficPolicy", "name", desired.Name, "namespace", desired.Namespace)
		return err
	}
	return nil
}

func (r *BackendTrafficPolicyReconciler) createTrafficPolicy() *egv1a1.BackendTrafficPolicy {
	return &egv1a1.BackendTrafficPolicy{
		ObjectMeta: metav1.ObjectMeta{
			Name:      r.isvc.Name,
			Namespace: r.isvc.Namespace,
		},
		Spec: egv1a1.BackendTrafficPolicySpec{
			RateLimit: &egv1a1.RateLimitSpec{
				Type:   egv1a1.GlobalRateLimitType,
				Global: &r.isvc.Spec.TrafficPolicy.RateLimit.Global,
			},
		},
	}
}
