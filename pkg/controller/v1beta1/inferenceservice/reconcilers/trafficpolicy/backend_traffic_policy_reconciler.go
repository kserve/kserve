/*
Copyright 2025 The KServe Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

package trafficpolicy

import (
	"context"

	egv1a1 "github.com/envoyproxy/gateway/api/v1alpha1"
	"github.com/go-logr/logr"
	"k8s.io/apimachinery/pkg/api/equality"
	apierr "k8s.io/apimachinery/pkg/api/errors"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"sigs.k8s.io/controller-runtime/pkg/client"
	gwapiv1a2 "sigs.k8s.io/gateway-api/apis/v1alpha2"

	"github.com/kserve/kserve/pkg/apis/serving/v1beta1"
	"github.com/kserve/kserve/pkg/constants"
	"github.com/kserve/kserve/pkg/utils"
)

// BackendTrafficPolicyReconciler reconciles the TrafficPolicy resource for the InferenceService
type BackendTrafficPolicyReconciler struct {
	client        client.Client
	ingressConfig *v1beta1.IngressConfig
	log           logr.Logger
}

// NewBackendTrafficPolicyReconciler creates a new BackendTrafficPolicyReconciler
func NewBackendTrafficPolicyReconciler(client client.Client, ingressConfig *v1beta1.IngressConfig, logger logr.Logger) *BackendTrafficPolicyReconciler {
	return &BackendTrafficPolicyReconciler{
		client:        client,
		ingressConfig: ingressConfig,
		log:           logger,
	}
}

// Reconcile reconciles the TrafficPolicy resource for the InferenceService
func (r *BackendTrafficPolicyReconciler) Reconcile(ctx context.Context, isvc *v1beta1.InferenceService) error {
	desired := r.createTrafficPolicy(isvc)
	// Note: Not setting controller reference as cross-namespace reference is not allowed.

	existing := &egv1a1.BackendTrafficPolicy{}
	if err := r.client.Get(ctx, client.ObjectKey{Namespace: desired.Namespace, Name: desired.Name}, existing); err != nil {
		if apierr.IsNotFound(err) {
			r.log.Info("Creating BackendTrafficPolicy", "name", desired.Name, "namespace", desired.Namespace)
			if err := r.client.Create(ctx, desired); err != nil {
				r.log.Error(err, "Failed to create BackendTrafficPolicy", "name", desired.Name, "namespace", desired.Namespace)
				return err
			}
			return nil
		}
		return err
	}

	// Set ResourceVersion which is required for update operation.
	desired.ResourceVersion = existing.ResourceVersion
	// Do a dry-run update to avoid diffs generated by default values.
	if err := r.client.Update(ctx, desired, client.DryRunAll); err != nil {
		r.log.Error(err, "Failed to perform dry-run update for BackendTrafficPolicy", "name", desired.Name, "namespace", desired.Namespace)
	}
	if r.SemanticEquals(existing, desired) {
		r.log.Info("BackendTrafficPolicy is up-to-date", "name", desired.Name, "namespace", desired.Namespace)
		return nil
	}
	r.log.Info("Updating BackendTrafficPolicy", "name", desired.Name, "namespace", desired.Namespace)
	if err := r.client.Update(ctx, desired); err != nil {
		r.log.Error(err, "Failed to update BackendTrafficPolicy", "name", desired.Name, "namespace", desired.Namespace)
		return err
	}
	return nil
}

func (r *BackendTrafficPolicyReconciler) createTrafficPolicy(isvc *v1beta1.InferenceService) *egv1a1.BackendTrafficPolicy {
	gwNamespace, gwName := v1beta1.ParseIngressGateway(r.ingressConfig.KserveIngressGateway)
	return &egv1a1.BackendTrafficPolicy{
		ObjectMeta: metav1.ObjectMeta{
			Name:      getTrafficPolicyName(isvc),
			Namespace: gwNamespace, // Use the gateway namespace
			// Add ownership labels for the BackendTrafficPolicy
			Labels: utils.Union(isvc.Labels, map[string]string{
				constants.InferenceServiceNameLabel:      isvc.Name,
				constants.InferenceServiceNamespaceLabel: isvc.Namespace,
			}),
			Annotations: isvc.Annotations,
		},
		Spec: egv1a1.BackendTrafficPolicySpec{
			PolicyTargetReferences: egv1a1.PolicyTargetReferences{
				TargetRefs: []gwapiv1a2.LocalPolicyTargetReferenceWithSectionName{
					{
						LocalPolicyTargetReference: gwapiv1a2.LocalPolicyTargetReference{
							Group: "gateway.networking.k8s.io",
							Kind:  constants.KindGateway,
							Name:  gwapiv1a2.ObjectName(gwName),
						},
					},
				},
			},
			RateLimit: &egv1a1.RateLimitSpec{
				Type:   egv1a1.GlobalRateLimitType,
				Global: &isvc.Spec.TrafficPolicy.RateLimit.Global,
			},
		},
	}
}

// SemanticEquals checks if two BackendTrafficPolicy objects are semantically equal
func (r *BackendTrafficPolicyReconciler) SemanticEquals(desired, existing *egv1a1.BackendTrafficPolicy) bool {
	return equality.Semantic.DeepEqual(desired.Spec, existing.Spec) &&
		equality.Semantic.DeepEqual(desired.Labels, existing.Labels) &&
		equality.Semantic.DeepEqual(desired.Annotations, existing.Annotations)
}

func getTrafficPolicyName(isvc *v1beta1.InferenceService) string {
	return isvc.Name
}

// DeleteTrafficPolicy deletes the TrafficPolicy resource related to the InferenceService
func DeleteTrafficPolicy(ctx context.Context, k8sClient client.Client, ingressConfig *v1beta1.IngressConfig, isvc *v1beta1.InferenceService,
	logger logr.Logger,
) error {
	logger = logger.WithValues("InferenceService", isvc.Name, "namespace", isvc.Namespace)
	gwNamespace, _ := v1beta1.ParseIngressGateway(ingressConfig.KserveIngressGateway)
	trafficPolicy := &egv1a1.BackendTrafficPolicy{
		ObjectMeta: metav1.ObjectMeta{
			Name:      isvc.Name,
			Namespace: gwNamespace,
		},
	}
	logger.Info("Deleting BackendTrafficPolicy", "name", trafficPolicy.Name, "namespace", trafficPolicy.Namespace)
	if err := k8sClient.Delete(ctx, trafficPolicy, client.PropagationPolicy(metav1.DeletePropagationBackground)); err != nil && !apierr.IsNotFound(err) {
		return err
	}
	return nil
}
