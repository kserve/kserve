/*
Copyright 2023 The KServe Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

package aigateway

import (
	"context"
	"fmt"

	aigwv1a1 "github.com/envoyproxy/ai-gateway/api/v1alpha1"
	"github.com/go-logr/logr"
	"k8s.io/apimachinery/pkg/api/equality"
	apierr "k8s.io/apimachinery/pkg/api/errors"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/utils/ptr"
	"sigs.k8s.io/controller-runtime/pkg/client"
	gwapiv1 "sigs.k8s.io/gateway-api/apis/v1"

	"github.com/kserve/kserve/pkg/apis/serving/v1beta1"
	"github.com/kserve/kserve/pkg/constants"
	"github.com/kserve/kserve/pkg/utils"
)

type AIServiceBackendReconciler struct {
	client        client.Client
	ingressConfig *v1beta1.IngressConfig
	log           logr.Logger
}

func NewAIServiceBackendReconciler(client client.Client, ingressConfig *v1beta1.IngressConfig, logger logr.Logger) *AIServiceBackendReconciler {
	return &AIServiceBackendReconciler{
		client:        client,
		ingressConfig: ingressConfig,
		log:           logger,
	}
}

func (r *AIServiceBackendReconciler) Reconcile(ctx context.Context, isvc *v1beta1.InferenceService) error {
	desired := r.createAIServiceBackend(isvc)

	existing := &aigwv1a1.AIServiceBackend{}
	if err := r.client.Get(ctx, client.ObjectKey{Namespace: desired.Namespace, Name: desired.Name}, existing); err != nil {
		if apierr.IsNotFound(err) {
			r.log.Info("Creating AIServiceBackend", "name", desired.Name, "namespace", desired.Namespace)
			if err := r.client.Create(ctx, desired); err != nil {
				r.log.Error(err, "Failed to create AIServiceBackend", "name", desired.Name, "namespace", desired.Namespace)
				return err
			}
			return nil
		}
		return err
	}

	// Set ResourceVersion which is required for update operation.
	desired.ResourceVersion = existing.ResourceVersion
	// Do a dry-run update to avoid diffs generated by default values.
	// This will populate our local httpRoute with any default values that are present on the remote version.
	if err := r.client.Update(ctx, desired, client.DryRunAll); err != nil {
		r.log.Error(err, "Failed to perform dry-run update for AIServiceBackend", "name", desired.Name, "namespace", desired.Namespace)
		return err
	}
	if !r.SemanticEquals(desired, existing) {
		r.log.Info("Updating AIServiceBackend", "name", desired.Name, "namespace", desired.Namespace)
		if err := r.client.Update(ctx, desired); err != nil {
			r.log.Error(err, "Failed to update AIServiceBackend", "name", desired.Name, "namespace", desired.Namespace)
		}
	}
	return nil
}

func (r *AIServiceBackendReconciler) createAIServiceBackend(isvc *v1beta1.InferenceService) *aigwv1a1.AIServiceBackend {
	serviceName := constants.PredictorServiceName(isvc.Name)
	if isvc.Spec.Transformer != nil {
		serviceName = constants.TransformerServiceName(isvc.Name)
	}
	gwNamespace, _ := v1beta1.ParseIngressGateway(r.ingressConfig.KserveIngressGateway)

	// Add ownership tracking labels for manual cleanup
	labels := map[string]string{
		constants.InferenceServiceNameLabel:      isvc.Name,
		constants.InferenceServiceNamespaceLabel: isvc.Namespace,
	}

	aiServiceBackend := &aigwv1a1.AIServiceBackend{
		ObjectMeta: metav1.ObjectMeta{
			Name:        getAIServiceBackendName(isvc),
			Namespace:   gwNamespace, // AIServicebackend should be in the same namespace as the AIGatewayRoute and Gateway
			Labels:      utils.Union(isvc.Labels, labels),
			Annotations: isvc.Annotations,
		},
		Spec: aigwv1a1.AIServiceBackendSpec{
			APISchema: aigwv1a1.VersionedAPISchema{
				Name: aigwv1a1.APISchemaOpenAI,
			},
			BackendRef: gwapiv1.BackendObjectReference{
				Kind:      ptr.To(gwapiv1.Kind(constants.KindService)),
				Name:      gwapiv1.ObjectName(serviceName),
				Namespace: ptr.To(gwapiv1.Namespace(isvc.Namespace)),
				Port:      ptr.To(gwapiv1.PortNumber(constants.CommonDefaultHttpPort)),
			},
			Timeouts: &gwapiv1.HTTPRouteTimeouts{
				Request: ptr.To(gwapiv1.Duration(fmt.Sprintf("%ds", constants.DefaultTimeoutSeconds))),
			},
		},
	}
	return aiServiceBackend
}

// aiGatewayRouteSemanticEquals compares two AIGatewayRoute resources for semantic equality
func (r *AIServiceBackendReconciler) SemanticEquals(desired, existing *aigwv1a1.AIServiceBackend) bool {
	return equality.Semantic.DeepEqual(desired.Spec, existing.Spec) &&
		equality.Semantic.DeepEqual(desired.Labels, existing.Labels) &&
		equality.Semantic.DeepEqual(desired.Annotations, existing.Annotations)
}

// getAIServiceBackendName returns the AIServiceBackend name based on the InferenceService.
func getAIServiceBackendName(isvc *v1beta1.InferenceService) string {
	return isvc.Name
}

// DeleteAIServiceBackend deletes AIServiceBackend resources associated with the InferenceService
func DeleteAIServiceBackend(ctx context.Context, k8sClient client.Client, ingressConfig *v1beta1.IngressConfig, isvc *v1beta1.InferenceService, logger logr.Logger) error {
	logger = logger.WithValues("InferenceService", isvc.Name, "namespace", isvc.Namespace)

	// Get gateway namespace from config
	gwNamespace, _ := v1beta1.ParseIngressGateway(ingressConfig.KserveIngressGateway)
	backend := &aigwv1a1.AIServiceBackend{
		ObjectMeta: metav1.ObjectMeta{
			Name:      getAIServiceBackendName(isvc),
			Namespace: gwNamespace,
		},
	}

	logger.Info("Deleting AIServiceBackend", "name", backend.Name, "namespace", backend.Namespace)
	if err := k8sClient.Delete(ctx, backend, client.PropagationPolicy(metav1.DeletePropagationBackground)); err != nil {
		logger.Error(err, "Failed to delete AIServiceBackend", "name", backend.Name, "namespace", backend.Namespace)
		return err
	}
	return nil
}
