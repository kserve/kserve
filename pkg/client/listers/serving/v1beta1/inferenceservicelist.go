/*
Copyright 2023 The KServe Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1beta1

import (
	v1beta1 "github.com/kserve/kserve/pkg/apis/serving/v1beta1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// InferenceServiceListLister helps list InferenceServiceLists.
// All objects returned here must be treated as read-only.
type InferenceServiceListLister interface {
	// List lists all InferenceServiceLists in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1beta1.InferenceServiceList, err error)
	// InferenceServiceLists returns an object that can list and get InferenceServiceLists.
	InferenceServiceLists(namespace string) InferenceServiceListNamespaceLister
	InferenceServiceListListerExpansion
}

// inferenceServiceListLister implements the InferenceServiceListLister interface.
type inferenceServiceListLister struct {
	indexer cache.Indexer
}

// NewInferenceServiceListLister returns a new InferenceServiceListLister.
func NewInferenceServiceListLister(indexer cache.Indexer) InferenceServiceListLister {
	return &inferenceServiceListLister{indexer: indexer}
}

// List lists all InferenceServiceLists in the indexer.
func (s *inferenceServiceListLister) List(selector labels.Selector) (ret []*v1beta1.InferenceServiceList, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1beta1.InferenceServiceList))
	})
	return ret, err
}

// InferenceServiceLists returns an object that can list and get InferenceServiceLists.
func (s *inferenceServiceListLister) InferenceServiceLists(namespace string) InferenceServiceListNamespaceLister {
	return inferenceServiceListNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// InferenceServiceListNamespaceLister helps list and get InferenceServiceLists.
// All objects returned here must be treated as read-only.
type InferenceServiceListNamespaceLister interface {
	// List lists all InferenceServiceLists in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1beta1.InferenceServiceList, err error)
	// Get retrieves the InferenceServiceList from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1beta1.InferenceServiceList, error)
	InferenceServiceListNamespaceListerExpansion
}

// inferenceServiceListNamespaceLister implements the InferenceServiceListNamespaceLister
// interface.
type inferenceServiceListNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all InferenceServiceLists in the indexer for a given namespace.
func (s inferenceServiceListNamespaceLister) List(selector labels.Selector) (ret []*v1beta1.InferenceServiceList, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1beta1.InferenceServiceList))
	})
	return ret, err
}

// Get retrieves the InferenceServiceList from the indexer for a given namespace and name.
func (s inferenceServiceListNamespaceLister) Get(name string) (*v1beta1.InferenceServiceList, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1beta1.Resource("inferenceservicelist"), name)
	}
	return obj.(*v1beta1.InferenceServiceList), nil
}
