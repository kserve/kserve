/*
Copyright 2019 kubeflow.org.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1beta1

import (
	v1beta1 "github.com/kubeflow/kfserving/pkg/apis/serving/v1beta1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// InferenceServiceLister helps list InferenceServices.
type InferenceServiceLister interface {
	// List lists all InferenceServices in the indexer.
	List(selector labels.Selector) (ret []*v1beta1.InferenceService, err error)
	// InferenceServices returns an object that can list and get InferenceServices.
	InferenceServices(namespace string) InferenceServiceNamespaceLister
	InferenceServiceListerExpansion
}

// inferenceServiceLister implements the InferenceServiceLister interface.
type inferenceServiceLister struct {
	indexer cache.Indexer
}

// NewInferenceServiceLister returns a new InferenceServiceLister.
func NewInferenceServiceLister(indexer cache.Indexer) InferenceServiceLister {
	return &inferenceServiceLister{indexer: indexer}
}

// List lists all InferenceServices in the indexer.
func (s *inferenceServiceLister) List(selector labels.Selector) (ret []*v1beta1.InferenceService, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1beta1.InferenceService))
	})
	return ret, err
}

// InferenceServices returns an object that can list and get InferenceServices.
func (s *inferenceServiceLister) InferenceServices(namespace string) InferenceServiceNamespaceLister {
	return inferenceServiceNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// InferenceServiceNamespaceLister helps list and get InferenceServices.
type InferenceServiceNamespaceLister interface {
	// List lists all InferenceServices in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1beta1.InferenceService, err error)
	// Get retrieves the InferenceService from the indexer for a given namespace and name.
	Get(name string) (*v1beta1.InferenceService, error)
	InferenceServiceNamespaceListerExpansion
}

// inferenceServiceNamespaceLister implements the InferenceServiceNamespaceLister
// interface.
type inferenceServiceNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all InferenceServices in the indexer for a given namespace.
func (s inferenceServiceNamespaceLister) List(selector labels.Selector) (ret []*v1beta1.InferenceService, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1beta1.InferenceService))
	})
	return ret, err
}

// Get retrieves the InferenceService from the indexer for a given namespace and name.
func (s inferenceServiceNamespaceLister) Get(name string) (*v1beta1.InferenceService, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1beta1.Resource("inferenceservice"), name)
	}
	return obj.(*v1beta1.InferenceService), nil
}
