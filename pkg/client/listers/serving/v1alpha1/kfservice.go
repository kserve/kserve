/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/kubeflow/kfserving/pkg/apis/serving/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// KFServiceLister helps list KFServices.
type KFServiceLister interface {
	// List lists all KFServices in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.KFService, err error)
	// KFServices returns an object that can list and get KFServices.
	KFServices(namespace string) KFServiceNamespaceLister
	KFServiceListerExpansion
}

// kFServiceLister implements the KFServiceLister interface.
type kFServiceLister struct {
	indexer cache.Indexer
}

// NewKFServiceLister returns a new KFServiceLister.
func NewKFServiceLister(indexer cache.Indexer) KFServiceLister {
	return &kFServiceLister{indexer: indexer}
}

// List lists all KFServices in the indexer.
func (s *kFServiceLister) List(selector labels.Selector) (ret []*v1alpha1.KFService, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.KFService))
	})
	return ret, err
}

// KFServices returns an object that can list and get KFServices.
func (s *kFServiceLister) KFServices(namespace string) KFServiceNamespaceLister {
	return kFServiceNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// KFServiceNamespaceLister helps list and get KFServices.
type KFServiceNamespaceLister interface {
	// List lists all KFServices in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.KFService, err error)
	// Get retrieves the KFService from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.KFService, error)
	KFServiceNamespaceListerExpansion
}

// kFServiceNamespaceLister implements the KFServiceNamespaceLister
// interface.
type kFServiceNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all KFServices in the indexer for a given namespace.
func (s kFServiceNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.KFService, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.KFService))
	})
	return ret, err
}

// Get retrieves the KFService from the indexer for a given namespace and name.
func (s kFServiceNamespaceLister) Get(name string) (*v1alpha1.KFService, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("kfservice"), name)
	}
	return obj.(*v1alpha1.KFService), nil
}
