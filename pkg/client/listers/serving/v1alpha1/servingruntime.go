/*
Copyright 2023 The KServe Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/kserve/kserve/pkg/apis/serving/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ServingRuntimeLister helps list ServingRuntimes.
// All objects returned here must be treated as read-only.
type ServingRuntimeLister interface {
	// List lists all ServingRuntimes in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ServingRuntime, err error)
	// ServingRuntimes returns an object that can list and get ServingRuntimes.
	ServingRuntimes(namespace string) ServingRuntimeNamespaceLister
	ServingRuntimeListerExpansion
}

// servingRuntimeLister implements the ServingRuntimeLister interface.
type servingRuntimeLister struct {
	indexer cache.Indexer
}

// NewServingRuntimeLister returns a new ServingRuntimeLister.
func NewServingRuntimeLister(indexer cache.Indexer) ServingRuntimeLister {
	return &servingRuntimeLister{indexer: indexer}
}

// List lists all ServingRuntimes in the indexer.
func (s *servingRuntimeLister) List(selector labels.Selector) (ret []*v1alpha1.ServingRuntime, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ServingRuntime))
	})
	return ret, err
}

// ServingRuntimes returns an object that can list and get ServingRuntimes.
func (s *servingRuntimeLister) ServingRuntimes(namespace string) ServingRuntimeNamespaceLister {
	return servingRuntimeNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ServingRuntimeNamespaceLister helps list and get ServingRuntimes.
// All objects returned here must be treated as read-only.
type ServingRuntimeNamespaceLister interface {
	// List lists all ServingRuntimes in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ServingRuntime, err error)
	// Get retrieves the ServingRuntime from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.ServingRuntime, error)
	ServingRuntimeNamespaceListerExpansion
}

// servingRuntimeNamespaceLister implements the ServingRuntimeNamespaceLister
// interface.
type servingRuntimeNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ServingRuntimes in the indexer for a given namespace.
func (s servingRuntimeNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.ServingRuntime, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ServingRuntime))
	})
	return ret, err
}

// Get retrieves the ServingRuntime from the indexer for a given namespace and name.
func (s servingRuntimeNamespaceLister) Get(name string) (*v1alpha1.ServingRuntime, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("servingruntime"), name)
	}
	return obj.(*v1alpha1.ServingRuntime), nil
}
