/*
Copyright 2023 The KServe Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/kserve/kserve/pkg/apis/serving/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ClusterServingRuntimeLister helps list ClusterServingRuntimes.
// All objects returned here must be treated as read-only.
type ClusterServingRuntimeLister interface {
	// List lists all ClusterServingRuntimes in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ClusterServingRuntime, err error)
	// ClusterServingRuntimes returns an object that can list and get ClusterServingRuntimes.
	ClusterServingRuntimes(namespace string) ClusterServingRuntimeNamespaceLister
	ClusterServingRuntimeListerExpansion
}

// clusterServingRuntimeLister implements the ClusterServingRuntimeLister interface.
type clusterServingRuntimeLister struct {
	indexer cache.Indexer
}

// NewClusterServingRuntimeLister returns a new ClusterServingRuntimeLister.
func NewClusterServingRuntimeLister(indexer cache.Indexer) ClusterServingRuntimeLister {
	return &clusterServingRuntimeLister{indexer: indexer}
}

// List lists all ClusterServingRuntimes in the indexer.
func (s *clusterServingRuntimeLister) List(selector labels.Selector) (ret []*v1alpha1.ClusterServingRuntime, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ClusterServingRuntime))
	})
	return ret, err
}

// ClusterServingRuntimes returns an object that can list and get ClusterServingRuntimes.
func (s *clusterServingRuntimeLister) ClusterServingRuntimes(namespace string) ClusterServingRuntimeNamespaceLister {
	return clusterServingRuntimeNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ClusterServingRuntimeNamespaceLister helps list and get ClusterServingRuntimes.
// All objects returned here must be treated as read-only.
type ClusterServingRuntimeNamespaceLister interface {
	// List lists all ClusterServingRuntimes in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ClusterServingRuntime, err error)
	// Get retrieves the ClusterServingRuntime from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.ClusterServingRuntime, error)
	ClusterServingRuntimeNamespaceListerExpansion
}

// clusterServingRuntimeNamespaceLister implements the ClusterServingRuntimeNamespaceLister
// interface.
type clusterServingRuntimeNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ClusterServingRuntimes in the indexer for a given namespace.
func (s clusterServingRuntimeNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.ClusterServingRuntime, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ClusterServingRuntime))
	})
	return ret, err
}

// Get retrieves the ClusterServingRuntime from the indexer for a given namespace and name.
func (s clusterServingRuntimeNamespaceLister) Get(name string) (*v1alpha1.ClusterServingRuntime, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("clusterservingruntime"), name)
	}
	return obj.(*v1alpha1.ClusterServingRuntime), nil
}
