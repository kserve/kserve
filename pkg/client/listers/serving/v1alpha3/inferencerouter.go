/*
Copyright 2019 kubeflow.org.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha3

import (
	v1alpha3 "github.com/kubeflow/kfserving/pkg/apis/serving/v1alpha3"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// InferenceRouterLister helps list InferenceRouters.
type InferenceRouterLister interface {
	// List lists all InferenceRouters in the indexer.
	List(selector labels.Selector) (ret []*v1alpha3.InferenceRouter, err error)
	// InferenceRouters returns an object that can list and get InferenceRouters.
	InferenceRouters(namespace string) InferenceRouterNamespaceLister
	InferenceRouterListerExpansion
}

// inferenceRouterLister implements the InferenceRouterLister interface.
type inferenceRouterLister struct {
	indexer cache.Indexer
}

// NewInferenceRouterLister returns a new InferenceRouterLister.
func NewInferenceRouterLister(indexer cache.Indexer) InferenceRouterLister {
	return &inferenceRouterLister{indexer: indexer}
}

// List lists all InferenceRouters in the indexer.
func (s *inferenceRouterLister) List(selector labels.Selector) (ret []*v1alpha3.InferenceRouter, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha3.InferenceRouter))
	})
	return ret, err
}

// InferenceRouters returns an object that can list and get InferenceRouters.
func (s *inferenceRouterLister) InferenceRouters(namespace string) InferenceRouterNamespaceLister {
	return inferenceRouterNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// InferenceRouterNamespaceLister helps list and get InferenceRouters.
type InferenceRouterNamespaceLister interface {
	// List lists all InferenceRouters in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha3.InferenceRouter, err error)
	// Get retrieves the InferenceRouter from the indexer for a given namespace and name.
	Get(name string) (*v1alpha3.InferenceRouter, error)
	InferenceRouterNamespaceListerExpansion
}

// inferenceRouterNamespaceLister implements the InferenceRouterNamespaceLister
// interface.
type inferenceRouterNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all InferenceRouters in the indexer for a given namespace.
func (s inferenceRouterNamespaceLister) List(selector labels.Selector) (ret []*v1alpha3.InferenceRouter, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha3.InferenceRouter))
	})
	return ret, err
}

// Get retrieves the InferenceRouter from the indexer for a given namespace and name.
func (s inferenceRouterNamespaceLister) Get(name string) (*v1alpha3.InferenceRouter, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha3.Resource("inferencerouter"), name)
	}
	return obj.(*v1alpha3.InferenceRouter), nil
}
