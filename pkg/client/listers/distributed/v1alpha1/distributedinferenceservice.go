/*
Copyright 2023 The KServe Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	distributedv1alpha1 "github.com/kserve/kserve/pkg/apis/distributed/v1alpha1"
	labels "k8s.io/apimachinery/pkg/labels"
	listers "k8s.io/client-go/listers"
	cache "k8s.io/client-go/tools/cache"
)

// DistributedInferenceServiceLister helps list DistributedInferenceServices.
// All objects returned here must be treated as read-only.
type DistributedInferenceServiceLister interface {
	// List lists all DistributedInferenceServices in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*distributedv1alpha1.DistributedInferenceService, err error)
	// DistributedInferenceServices returns an object that can list and get DistributedInferenceServices.
	DistributedInferenceServices(namespace string) DistributedInferenceServiceNamespaceLister
	DistributedInferenceServiceListerExpansion
}

// distributedInferenceServiceLister implements the DistributedInferenceServiceLister interface.
type distributedInferenceServiceLister struct {
	listers.ResourceIndexer[*distributedv1alpha1.DistributedInferenceService]
}

// NewDistributedInferenceServiceLister returns a new DistributedInferenceServiceLister.
func NewDistributedInferenceServiceLister(indexer cache.Indexer) DistributedInferenceServiceLister {
	return &distributedInferenceServiceLister{listers.New[*distributedv1alpha1.DistributedInferenceService](indexer, distributedv1alpha1.Resource("distributedinferenceservice"))}
}

// DistributedInferenceServices returns an object that can list and get DistributedInferenceServices.
func (s *distributedInferenceServiceLister) DistributedInferenceServices(namespace string) DistributedInferenceServiceNamespaceLister {
	return distributedInferenceServiceNamespaceLister{listers.NewNamespaced[*distributedv1alpha1.DistributedInferenceService](s.ResourceIndexer, namespace)}
}

// DistributedInferenceServiceNamespaceLister helps list and get DistributedInferenceServices.
// All objects returned here must be treated as read-only.
type DistributedInferenceServiceNamespaceLister interface {
	// List lists all DistributedInferenceServices in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*distributedv1alpha1.DistributedInferenceService, err error)
	// Get retrieves the DistributedInferenceService from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*distributedv1alpha1.DistributedInferenceService, error)
	DistributedInferenceServiceNamespaceListerExpansion
}

// distributedInferenceServiceNamespaceLister implements the DistributedInferenceServiceNamespaceLister
// interface.
type distributedInferenceServiceNamespaceLister struct {
	listers.ResourceIndexer[*distributedv1alpha1.DistributedInferenceService]
}
