{
  "swagger": "2.0",
  "info": {
    "description": "Python SDK for KFServing",
    "title": "KFServing",
    "version": "v0.1"
  },
  "paths": {},
  "definitions": {
    "knative.Condition": {
      "description": "Conditions defines a readiness condition for a Knative resource. See: https://github.com/kubernetes/community/blob/master/contributors/devel/api-conventions.md#typical-status-properties",
      "required": [
        "type",
        "status"
      ],
      "properties": {
        "lastTransitionTime": {
          "description": "LastTransitionTime is the last time the condition transitioned from one status to another. We use VolatileTime in place of metav1.Time to exclude this from creating equality.Semantic differences (all other things held constant).",
          "$ref": "#/definitions/knative.VolatileTime"
        },
        "message": {
          "description": "A human readable message indicating details about the transition.",
          "type": "string"
        },
        "reason": {
          "description": "The reason for the condition's last transition.",
          "type": "string"
        },
        "severity": {
          "description": "Severity with which to treat failures of this type of condition. When this is not specified, it defaults to Error.",
          "type": "string"
        },
        "status": {
          "description": "Status of the condition, one of True, False, Unknown.",
          "type": "string"
        },
        "type": {
          "description": "Type of condition.",
          "type": "string"
        }
      }
    },
    "knative.URL": {
      "description": "URL is an alias of url.URL. It has custom json marshal methods that enable it to be used in K8s CRDs such that the CRD resource will have the URL but operator code can can work with url.URL struct",
      "required": [
        "Scheme",
        "Opaque",
        "User",
        "Host",
        "Path",
        "RawPath",
        "ForceQuery",
        "RawQuery",
        "Fragment"
      ],
      "properties": {
        "ForceQuery": {
          "description": "encoded path hint (see EscapedPath method)",
          "type": "boolean"
        },
        "Fragment": {
          "description": "encoded query values, without '?'",
          "type": "string"
        },
        "Host": {
          "description": "username and password information",
          "type": "string"
        },
        "Opaque": {
          "type": "string"
        },
        "Path": {
          "description": "host or host:port",
          "type": "string"
        },
        "RawPath": {
          "description": "path (relative paths may omit leading slash)",
          "type": "string"
        },
        "RawQuery": {
          "description": "append a query ('?') even if RawQuery is empty",
          "type": "string"
        },
        "Scheme": {
          "type": "string"
        },
        "User": {
          "description": "encoded opaque data",
          "$ref": "#/definitions/net.url.Userinfo"
        }
      }
    },
    "knative.VolatileTime": {
      "description": "VolatileTime wraps metav1.Time",
      "required": [
        "Inner"
      ],
      "properties": {
        "Inner": {
          "$ref": "#/definitions/v1.Time"
        }
      }
    },
    "net.url.Userinfo": {
      "description": "The Userinfo type is an immutable encapsulation of username and password details for a URL. An existing Userinfo value is guaranteed to have a username set (potentially empty, as allowed by RFC 2396), and optionally a password.",
      "required": [
        "username",
        "password",
        "passwordSet"
      ],
      "properties": {
        "password": {
          "type": "string"
        },
        "passwordSet": {
          "type": "boolean"
        },
        "username": {
          "type": "string"
        }
      }
    },
    "v1alpha1.CustomSpec": {
      "description": "CustomSpec provides a hook for arbitrary container configuration.",
      "required": [
        "container"
      ],
      "properties": {
        "container": {
          "$ref": "#/definitions/v1.Container"
        }
      }
    },
    "v1alpha1.FrameworkConfig": {
      "required": [
        "image"
      ],
      "properties": {
        "image": {
          "type": "string"
        }
      }
    },
    "v1alpha1.FrameworksConfig": {
      "properties": {
        "pytorch": {
          "$ref": "#/definitions/v1alpha1.FrameworkConfig"
        },
        "sklearn": {
          "$ref": "#/definitions/v1alpha1.FrameworkConfig"
        },
        "tensorflow": {
          "$ref": "#/definitions/v1alpha1.FrameworkConfig"
        },
        "tensorrt": {
          "$ref": "#/definitions/v1alpha1.FrameworkConfig"
        },
        "xgboost": {
          "$ref": "#/definitions/v1alpha1.FrameworkConfig"
        }
      }
    },
    "v1alpha1.KFService": {
      "description": "KFService is the Schema for the services API",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/v1.ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/v1alpha1.KFServiceSpec"
        },
        "status": {
          "$ref": "#/definitions/v1alpha1.KFServiceStatus"
        }
      }
    },
    "v1alpha1.KFServiceList": {
      "description": "KFServiceList contains a list of Service",
      "required": [
        "items"
      ],
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
          "type": "string"
        },
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1alpha1.KFService"
          }
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/v1.ListMeta"
        }
      }
    },
    "v1alpha1.KFServiceSpec": {
      "description": "KFServiceSpec defines the desired state of KFService",
      "required": [
        "default"
      ],
      "properties": {
        "canary": {
          "description": "Canary defines an alternate configuration to route a percentage of traffic.",
          "$ref": "#/definitions/v1alpha1.ModelSpec"
        },
        "canaryTrafficPercent": {
          "type": "integer",
          "format": "int32"
        },
        "default": {
          "$ref": "#/definitions/v1alpha1.ModelSpec"
        }
      }
    },
    "v1alpha1.KFServiceStatus": {
      "description": "KFServiceStatus defines the observed state of KFService",
      "properties": {
        "canary": {
          "$ref": "#/definitions/v1alpha1.StatusConfigurationSpec"
        },
        "conditions": {
          "description": "Conditions the latest available observations of a resource's current state.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/knative.Condition"
          },
          "x-kubernetes-patch-merge-key": "type",
          "x-kubernetes-patch-strategy": "merge"
        },
        "default": {
          "$ref": "#/definitions/v1alpha1.StatusConfigurationSpec"
        },
        "observedGeneration": {
          "description": "ObservedGeneration is the 'Generation' of the Service that was last processed by the controller.",
          "type": "integer",
          "format": "int64"
        },
        "url": {
          "$ref": "#/definitions/knative.URL"
        }
      }
    },
    "v1alpha1.ModelSpec": {
      "description": "ModelSpec defines the default configuration to route traffic.",
      "properties": {
        "custom": {
          "description": "The following fields follow a \"1-of\" semantic. Users must specify exactly one openapispec.",
          "$ref": "#/definitions/v1alpha1.CustomSpec"
        },
        "maxReplicas": {
          "description": "This is the up bound for autoscaler to scale to",
          "type": "integer",
          "format": "int32"
        },
        "minReplicas": {
          "description": "Minimum number of replicas, pods won't scale down to 0 in case of no traffic",
          "type": "integer",
          "format": "int32"
        },
        "pytorch": {
          "$ref": "#/definitions/v1alpha1.PyTorchSpec"
        },
        "serviceAccountName": {
          "description": "Service Account Name",
          "type": "string"
        },
        "sklearn": {
          "$ref": "#/definitions/v1alpha1.SKLearnSpec"
        },
        "tensorflow": {
          "$ref": "#/definitions/v1alpha1.TensorflowSpec"
        },
        "tensorrt": {
          "$ref": "#/definitions/v1alpha1.TensorRTSpec"
        },
        "xgboost": {
          "$ref": "#/definitions/v1alpha1.XGBoostSpec"
        }
      }
    },
    "v1alpha1.PyTorchSpec": {
      "description": "PyTorchSpec defines arguments for configuring PyTorch model serving.",
      "required": [
        "modelUri"
      ],
      "properties": {
        "modelClassName": {
          "description": "Defaults PyTorch model class name to 'PyTorchModel'",
          "type": "string"
        },
        "modelUri": {
          "type": "string"
        },
        "resources": {
          "description": "Defaults to requests and limits of 1CPU, 2Gb MEM.",
          "$ref": "#/definitions/v1.ResourceRequirements"
        },
        "runtimeVersion": {
          "description": "Defaults to latest PyTorch Version",
          "type": "string"
        }
      }
    },
    "v1alpha1.SKLearnSpec": {
      "description": "SKLearnSpec defines arguments for configuring SKLearn model serving.",
      "required": [
        "modelUri"
      ],
      "properties": {
        "modelUri": {
          "type": "string"
        },
        "resources": {
          "description": "Defaults to requests and limits of 1CPU, 2Gb MEM.",
          "$ref": "#/definitions/v1.ResourceRequirements"
        },
        "runtimeVersion": {
          "description": "Defaults to latest SKLearn Version.",
          "type": "string"
        }
      }
    },
    "v1alpha1.StatusConfigurationSpec": {
      "description": "StatusConfigurationSpec describes the state of the configuration receiving traffic.",
      "properties": {
        "name": {
          "type": "string"
        },
        "replicas": {
          "type": "integer",
          "format": "int32"
        },
        "traffic": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "v1alpha1.TensorRTSpec": {
      "description": "TensorRTSpec defines arguments for configuring TensorRT model serving.",
      "required": [
        "modelUri"
      ],
      "properties": {
        "modelUri": {
          "type": "string"
        },
        "resources": {
          "description": "Defaults to requests and limits of 1CPU, 2Gb MEM.",
          "$ref": "#/definitions/v1.ResourceRequirements"
        },
        "runtimeVersion": {
          "description": "Defaults to latest TensorRT Version.",
          "type": "string"
        }
      }
    },
    "v1alpha1.TensorflowSpec": {
      "description": "TensorflowSpec defines arguments for configuring Tensorflow model serving.",
      "required": [
        "modelUri"
      ],
      "properties": {
        "modelUri": {
          "type": "string"
        },
        "resources": {
          "description": "Defaults to requests and limits of 1CPU, 2Gb MEM.",
          "$ref": "#/definitions/v1.ResourceRequirements"
        },
        "runtimeVersion": {
          "description": "Defaults to latest TF Version.",
          "type": "string"
        }
      }
    },
    "v1alpha1.XGBoostSpec": {
      "description": "XGBoostSpec defines arguments for configuring XGBoost model serving.",
      "required": [
        "modelUri"
      ],
      "properties": {
        "modelUri": {
          "type": "string"
        },
        "resources": {
          "description": "Defaults to requests and limits of 1CPU, 2Gb MEM.",
          "$ref": "#/definitions/v1.ResourceRequirements"
        },
        "runtimeVersion": {
          "description": "Defaults to latest XGBoost Version.",
          "type": "string"
        }
      }
    }
  }
}
