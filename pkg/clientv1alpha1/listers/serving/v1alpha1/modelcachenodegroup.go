/*
Copyright 2023 The KServe Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/kserve/kserve/pkg/apis/serving/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ModelCacheNodeGroupLister helps list ModelCacheNodeGroups.
// All objects returned here must be treated as read-only.
type ModelCacheNodeGroupLister interface {
	// List lists all ModelCacheNodeGroups in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ModelCacheNodeGroup, err error)
	// ModelCacheNodeGroups returns an object that can list and get ModelCacheNodeGroups.
	ModelCacheNodeGroups(namespace string) ModelCacheNodeGroupNamespaceLister
	ModelCacheNodeGroupListerExpansion
}

// modelCacheNodeGroupLister implements the ModelCacheNodeGroupLister interface.
type modelCacheNodeGroupLister struct {
	indexer cache.Indexer
}

// NewModelCacheNodeGroupLister returns a new ModelCacheNodeGroupLister.
func NewModelCacheNodeGroupLister(indexer cache.Indexer) ModelCacheNodeGroupLister {
	return &modelCacheNodeGroupLister{indexer: indexer}
}

// List lists all ModelCacheNodeGroups in the indexer.
func (s *modelCacheNodeGroupLister) List(selector labels.Selector) (ret []*v1alpha1.ModelCacheNodeGroup, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ModelCacheNodeGroup))
	})
	return ret, err
}

// ModelCacheNodeGroups returns an object that can list and get ModelCacheNodeGroups.
func (s *modelCacheNodeGroupLister) ModelCacheNodeGroups(namespace string) ModelCacheNodeGroupNamespaceLister {
	return modelCacheNodeGroupNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ModelCacheNodeGroupNamespaceLister helps list and get ModelCacheNodeGroups.
// All objects returned here must be treated as read-only.
type ModelCacheNodeGroupNamespaceLister interface {
	// List lists all ModelCacheNodeGroups in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ModelCacheNodeGroup, err error)
	// Get retrieves the ModelCacheNodeGroup from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.ModelCacheNodeGroup, error)
	ModelCacheNodeGroupNamespaceListerExpansion
}

// modelCacheNodeGroupNamespaceLister implements the ModelCacheNodeGroupNamespaceLister
// interface.
type modelCacheNodeGroupNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ModelCacheNodeGroups in the indexer for a given namespace.
func (s modelCacheNodeGroupNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.ModelCacheNodeGroup, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ModelCacheNodeGroup))
	})
	return ret, err
}

// Get retrieves the ModelCacheNodeGroup from the indexer for a given namespace and name.
func (s modelCacheNodeGroupNamespaceLister) Get(name string) (*v1alpha1.ModelCacheNodeGroup, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("modelcachenodegroup"), name)
	}
	return obj.(*v1alpha1.ModelCacheNodeGroup), nil
}
