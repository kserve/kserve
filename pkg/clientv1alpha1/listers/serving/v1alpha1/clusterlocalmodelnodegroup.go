/*
Copyright 2023 The KServe Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/kserve/kserve/pkg/apis/serving/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ClusterLocalModelNodeGroupLister helps list ClusterLocalModelNodeGroups.
// All objects returned here must be treated as read-only.
type ClusterLocalModelNodeGroupLister interface {
	// List lists all ClusterLocalModelNodeGroups in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ClusterLocalModelNodeGroup, err error)
	// ClusterLocalModelNodeGroups returns an object that can list and get ClusterLocalModelNodeGroups.
	ClusterLocalModelNodeGroups(namespace string) ClusterLocalModelNodeGroupNamespaceLister
	ClusterLocalModelNodeGroupListerExpansion
}

// clusterLocalModelNodeGroupLister implements the ClusterLocalModelNodeGroupLister interface.
type clusterLocalModelNodeGroupLister struct {
	indexer cache.Indexer
}

// NewClusterLocalModelNodeGroupLister returns a new ClusterLocalModelNodeGroupLister.
func NewClusterLocalModelNodeGroupLister(indexer cache.Indexer) ClusterLocalModelNodeGroupLister {
	return &clusterLocalModelNodeGroupLister{indexer: indexer}
}

// List lists all ClusterLocalModelNodeGroups in the indexer.
func (s *clusterLocalModelNodeGroupLister) List(selector labels.Selector) (ret []*v1alpha1.ClusterLocalModelNodeGroup, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ClusterLocalModelNodeGroup))
	})
	return ret, err
}

// ClusterLocalModelNodeGroups returns an object that can list and get ClusterLocalModelNodeGroups.
func (s *clusterLocalModelNodeGroupLister) ClusterLocalModelNodeGroups(namespace string) ClusterLocalModelNodeGroupNamespaceLister {
	return clusterLocalModelNodeGroupNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ClusterLocalModelNodeGroupNamespaceLister helps list and get ClusterLocalModelNodeGroups.
// All objects returned here must be treated as read-only.
type ClusterLocalModelNodeGroupNamespaceLister interface {
	// List lists all ClusterLocalModelNodeGroups in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ClusterLocalModelNodeGroup, err error)
	// Get retrieves the ClusterLocalModelNodeGroup from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.ClusterLocalModelNodeGroup, error)
	ClusterLocalModelNodeGroupNamespaceListerExpansion
}

// clusterLocalModelNodeGroupNamespaceLister implements the ClusterLocalModelNodeGroupNamespaceLister
// interface.
type clusterLocalModelNodeGroupNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ClusterLocalModelNodeGroups in the indexer for a given namespace.
func (s clusterLocalModelNodeGroupNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.ClusterLocalModelNodeGroup, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ClusterLocalModelNodeGroup))
	})
	return ret, err
}

// Get retrieves the ClusterLocalModelNodeGroup from the indexer for a given namespace and name.
func (s clusterLocalModelNodeGroupNamespaceLister) Get(name string) (*v1alpha1.ClusterLocalModelNodeGroup, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("clusterlocalmodelnodegroup"), name)
	}
	return obj.(*v1alpha1.ClusterLocalModelNodeGroup), nil
}
