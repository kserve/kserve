/*
Copyright 2023 The KServe Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/kserve/kserve/pkg/apis/serving/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ServingRuntimeListLister helps list ServingRuntimeLists.
// All objects returned here must be treated as read-only.
type ServingRuntimeListLister interface {
	// List lists all ServingRuntimeLists in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ServingRuntimeList, err error)
	// ServingRuntimeLists returns an object that can list and get ServingRuntimeLists.
	ServingRuntimeLists(namespace string) ServingRuntimeListNamespaceLister
	ServingRuntimeListListerExpansion
}

// servingRuntimeListLister implements the ServingRuntimeListLister interface.
type servingRuntimeListLister struct {
	indexer cache.Indexer
}

// NewServingRuntimeListLister returns a new ServingRuntimeListLister.
func NewServingRuntimeListLister(indexer cache.Indexer) ServingRuntimeListLister {
	return &servingRuntimeListLister{indexer: indexer}
}

// List lists all ServingRuntimeLists in the indexer.
func (s *servingRuntimeListLister) List(selector labels.Selector) (ret []*v1alpha1.ServingRuntimeList, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ServingRuntimeList))
	})
	return ret, err
}

// ServingRuntimeLists returns an object that can list and get ServingRuntimeLists.
func (s *servingRuntimeListLister) ServingRuntimeLists(namespace string) ServingRuntimeListNamespaceLister {
	return servingRuntimeListNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ServingRuntimeListNamespaceLister helps list and get ServingRuntimeLists.
// All objects returned here must be treated as read-only.
type ServingRuntimeListNamespaceLister interface {
	// List lists all ServingRuntimeLists in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ServingRuntimeList, err error)
	// Get retrieves the ServingRuntimeList from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.ServingRuntimeList, error)
	ServingRuntimeListNamespaceListerExpansion
}

// servingRuntimeListNamespaceLister implements the ServingRuntimeListNamespaceLister
// interface.
type servingRuntimeListNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ServingRuntimeLists in the indexer for a given namespace.
func (s servingRuntimeListNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.ServingRuntimeList, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ServingRuntimeList))
	})
	return ret, err
}

// Get retrieves the ServingRuntimeList from the indexer for a given namespace and name.
func (s servingRuntimeListNamespaceLister) Get(name string) (*v1alpha1.ServingRuntimeList, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("servingruntimelist"), name)
	}
	return obj.(*v1alpha1.ServingRuntimeList), nil
}
