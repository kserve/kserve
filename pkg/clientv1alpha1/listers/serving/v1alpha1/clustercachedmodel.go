/*
Copyright 2023 The KServe Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/kserve/kserve/pkg/apis/serving/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ClusterCachedModelLister helps list ClusterCachedModels.
// All objects returned here must be treated as read-only.
type ClusterCachedModelLister interface {
	// List lists all ClusterCachedModels in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ClusterCachedModel, err error)
	// ClusterCachedModels returns an object that can list and get ClusterCachedModels.
	ClusterCachedModels(namespace string) ClusterCachedModelNamespaceLister
	ClusterCachedModelListerExpansion
}

// clusterCachedModelLister implements the ClusterCachedModelLister interface.
type clusterCachedModelLister struct {
	indexer cache.Indexer
}

// NewClusterCachedModelLister returns a new ClusterCachedModelLister.
func NewClusterCachedModelLister(indexer cache.Indexer) ClusterCachedModelLister {
	return &clusterCachedModelLister{indexer: indexer}
}

// List lists all ClusterCachedModels in the indexer.
func (s *clusterCachedModelLister) List(selector labels.Selector) (ret []*v1alpha1.ClusterCachedModel, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ClusterCachedModel))
	})
	return ret, err
}

// ClusterCachedModels returns an object that can list and get ClusterCachedModels.
func (s *clusterCachedModelLister) ClusterCachedModels(namespace string) ClusterCachedModelNamespaceLister {
	return clusterCachedModelNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ClusterCachedModelNamespaceLister helps list and get ClusterCachedModels.
// All objects returned here must be treated as read-only.
type ClusterCachedModelNamespaceLister interface {
	// List lists all ClusterCachedModels in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ClusterCachedModel, err error)
	// Get retrieves the ClusterCachedModel from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.ClusterCachedModel, error)
	ClusterCachedModelNamespaceListerExpansion
}

// clusterCachedModelNamespaceLister implements the ClusterCachedModelNamespaceLister
// interface.
type clusterCachedModelNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ClusterCachedModels in the indexer for a given namespace.
func (s clusterCachedModelNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.ClusterCachedModel, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ClusterCachedModel))
	})
	return ret, err
}

// Get retrieves the ClusterCachedModel from the indexer for a given namespace and name.
func (s clusterCachedModelNamespaceLister) Get(name string) (*v1alpha1.ClusterCachedModel, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("clustercachedmodel"), name)
	}
	return obj.(*v1alpha1.ClusterCachedModel), nil
}
