/*
Copyright 2023 The KServe Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/kserve/kserve/pkg/apis/serving/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// InferenceGraphListLister helps list InferenceGraphLists.
// All objects returned here must be treated as read-only.
type InferenceGraphListLister interface {
	// List lists all InferenceGraphLists in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.InferenceGraphList, err error)
	// InferenceGraphLists returns an object that can list and get InferenceGraphLists.
	InferenceGraphLists(namespace string) InferenceGraphListNamespaceLister
	InferenceGraphListListerExpansion
}

// inferenceGraphListLister implements the InferenceGraphListLister interface.
type inferenceGraphListLister struct {
	indexer cache.Indexer
}

// NewInferenceGraphListLister returns a new InferenceGraphListLister.
func NewInferenceGraphListLister(indexer cache.Indexer) InferenceGraphListLister {
	return &inferenceGraphListLister{indexer: indexer}
}

// List lists all InferenceGraphLists in the indexer.
func (s *inferenceGraphListLister) List(selector labels.Selector) (ret []*v1alpha1.InferenceGraphList, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.InferenceGraphList))
	})
	return ret, err
}

// InferenceGraphLists returns an object that can list and get InferenceGraphLists.
func (s *inferenceGraphListLister) InferenceGraphLists(namespace string) InferenceGraphListNamespaceLister {
	return inferenceGraphListNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// InferenceGraphListNamespaceLister helps list and get InferenceGraphLists.
// All objects returned here must be treated as read-only.
type InferenceGraphListNamespaceLister interface {
	// List lists all InferenceGraphLists in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.InferenceGraphList, err error)
	// Get retrieves the InferenceGraphList from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.InferenceGraphList, error)
	InferenceGraphListNamespaceListerExpansion
}

// inferenceGraphListNamespaceLister implements the InferenceGraphListNamespaceLister
// interface.
type inferenceGraphListNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all InferenceGraphLists in the indexer for a given namespace.
func (s inferenceGraphListNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.InferenceGraphList, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.InferenceGraphList))
	})
	return ret, err
}

// Get retrieves the InferenceGraphList from the indexer for a given namespace and name.
func (s inferenceGraphListNamespaceLister) Get(name string) (*v1alpha1.InferenceGraphList, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("inferencegraphlist"), name)
	}
	return obj.(*v1alpha1.InferenceGraphList), nil
}
