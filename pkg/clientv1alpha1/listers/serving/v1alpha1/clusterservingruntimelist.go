/*
Copyright 2023 The KServe Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/kserve/kserve/pkg/apis/serving/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ClusterServingRuntimeListLister helps list ClusterServingRuntimeLists.
// All objects returned here must be treated as read-only.
type ClusterServingRuntimeListLister interface {
	// List lists all ClusterServingRuntimeLists in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ClusterServingRuntimeList, err error)
	// ClusterServingRuntimeLists returns an object that can list and get ClusterServingRuntimeLists.
	ClusterServingRuntimeLists(namespace string) ClusterServingRuntimeListNamespaceLister
	ClusterServingRuntimeListListerExpansion
}

// clusterServingRuntimeListLister implements the ClusterServingRuntimeListLister interface.
type clusterServingRuntimeListLister struct {
	indexer cache.Indexer
}

// NewClusterServingRuntimeListLister returns a new ClusterServingRuntimeListLister.
func NewClusterServingRuntimeListLister(indexer cache.Indexer) ClusterServingRuntimeListLister {
	return &clusterServingRuntimeListLister{indexer: indexer}
}

// List lists all ClusterServingRuntimeLists in the indexer.
func (s *clusterServingRuntimeListLister) List(selector labels.Selector) (ret []*v1alpha1.ClusterServingRuntimeList, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ClusterServingRuntimeList))
	})
	return ret, err
}

// ClusterServingRuntimeLists returns an object that can list and get ClusterServingRuntimeLists.
func (s *clusterServingRuntimeListLister) ClusterServingRuntimeLists(namespace string) ClusterServingRuntimeListNamespaceLister {
	return clusterServingRuntimeListNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ClusterServingRuntimeListNamespaceLister helps list and get ClusterServingRuntimeLists.
// All objects returned here must be treated as read-only.
type ClusterServingRuntimeListNamespaceLister interface {
	// List lists all ClusterServingRuntimeLists in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ClusterServingRuntimeList, err error)
	// Get retrieves the ClusterServingRuntimeList from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.ClusterServingRuntimeList, error)
	ClusterServingRuntimeListNamespaceListerExpansion
}

// clusterServingRuntimeListNamespaceLister implements the ClusterServingRuntimeListNamespaceLister
// interface.
type clusterServingRuntimeListNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ClusterServingRuntimeLists in the indexer for a given namespace.
func (s clusterServingRuntimeListNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.ClusterServingRuntimeList, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ClusterServingRuntimeList))
	})
	return ret, err
}

// Get retrieves the ClusterServingRuntimeList from the indexer for a given namespace and name.
func (s clusterServingRuntimeListNamespaceLister) Get(name string) (*v1alpha1.ClusterServingRuntimeList, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("clusterservingruntimelist"), name)
	}
	return obj.(*v1alpha1.ClusterServingRuntimeList), nil
}
