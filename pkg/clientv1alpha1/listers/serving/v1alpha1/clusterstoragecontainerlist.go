/*
Copyright 2023 The KServe Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/kserve/kserve/pkg/apis/serving/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ClusterStorageContainerListLister helps list ClusterStorageContainerLists.
// All objects returned here must be treated as read-only.
type ClusterStorageContainerListLister interface {
	// List lists all ClusterStorageContainerLists in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ClusterStorageContainerList, err error)
	// ClusterStorageContainerLists returns an object that can list and get ClusterStorageContainerLists.
	ClusterStorageContainerLists(namespace string) ClusterStorageContainerListNamespaceLister
	ClusterStorageContainerListListerExpansion
}

// clusterStorageContainerListLister implements the ClusterStorageContainerListLister interface.
type clusterStorageContainerListLister struct {
	indexer cache.Indexer
}

// NewClusterStorageContainerListLister returns a new ClusterStorageContainerListLister.
func NewClusterStorageContainerListLister(indexer cache.Indexer) ClusterStorageContainerListLister {
	return &clusterStorageContainerListLister{indexer: indexer}
}

// List lists all ClusterStorageContainerLists in the indexer.
func (s *clusterStorageContainerListLister) List(selector labels.Selector) (ret []*v1alpha1.ClusterStorageContainerList, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ClusterStorageContainerList))
	})
	return ret, err
}

// ClusterStorageContainerLists returns an object that can list and get ClusterStorageContainerLists.
func (s *clusterStorageContainerListLister) ClusterStorageContainerLists(namespace string) ClusterStorageContainerListNamespaceLister {
	return clusterStorageContainerListNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ClusterStorageContainerListNamespaceLister helps list and get ClusterStorageContainerLists.
// All objects returned here must be treated as read-only.
type ClusterStorageContainerListNamespaceLister interface {
	// List lists all ClusterStorageContainerLists in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ClusterStorageContainerList, err error)
	// Get retrieves the ClusterStorageContainerList from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.ClusterStorageContainerList, error)
	ClusterStorageContainerListNamespaceListerExpansion
}

// clusterStorageContainerListNamespaceLister implements the ClusterStorageContainerListNamespaceLister
// interface.
type clusterStorageContainerListNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ClusterStorageContainerLists in the indexer for a given namespace.
func (s clusterStorageContainerListNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.ClusterStorageContainerList, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ClusterStorageContainerList))
	})
	return ret, err
}

// Get retrieves the ClusterStorageContainerList from the indexer for a given namespace and name.
func (s clusterStorageContainerListNamespaceLister) Get(name string) (*v1alpha1.ClusterStorageContainerList, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("clusterstoragecontainerlist"), name)
	}
	return obj.(*v1alpha1.ClusterStorageContainerList), nil
}
