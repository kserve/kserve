/*
Copyright 2023 The KServe Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/kserve/kserve/pkg/apis/serving/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// TrainedModelListLister helps list TrainedModelLists.
// All objects returned here must be treated as read-only.
type TrainedModelListLister interface {
	// List lists all TrainedModelLists in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.TrainedModelList, err error)
	// TrainedModelLists returns an object that can list and get TrainedModelLists.
	TrainedModelLists(namespace string) TrainedModelListNamespaceLister
	TrainedModelListListerExpansion
}

// trainedModelListLister implements the TrainedModelListLister interface.
type trainedModelListLister struct {
	indexer cache.Indexer
}

// NewTrainedModelListLister returns a new TrainedModelListLister.
func NewTrainedModelListLister(indexer cache.Indexer) TrainedModelListLister {
	return &trainedModelListLister{indexer: indexer}
}

// List lists all TrainedModelLists in the indexer.
func (s *trainedModelListLister) List(selector labels.Selector) (ret []*v1alpha1.TrainedModelList, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.TrainedModelList))
	})
	return ret, err
}

// TrainedModelLists returns an object that can list and get TrainedModelLists.
func (s *trainedModelListLister) TrainedModelLists(namespace string) TrainedModelListNamespaceLister {
	return trainedModelListNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// TrainedModelListNamespaceLister helps list and get TrainedModelLists.
// All objects returned here must be treated as read-only.
type TrainedModelListNamespaceLister interface {
	// List lists all TrainedModelLists in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.TrainedModelList, err error)
	// Get retrieves the TrainedModelList from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.TrainedModelList, error)
	TrainedModelListNamespaceListerExpansion
}

// trainedModelListNamespaceLister implements the TrainedModelListNamespaceLister
// interface.
type trainedModelListNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all TrainedModelLists in the indexer for a given namespace.
func (s trainedModelListNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.TrainedModelList, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.TrainedModelList))
	})
	return ret, err
}

// Get retrieves the TrainedModelList from the indexer for a given namespace and name.
func (s trainedModelListNamespaceLister) Get(name string) (*v1alpha1.TrainedModelList, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("trainedmodellist"), name)
	}
	return obj.(*v1alpha1.TrainedModelList), nil
}
