# coding: utf-8

"""
    KFServing

    Python SDK for KFServing  # noqa: E501

    OpenAPI spec version: v0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from kfserving.sdk.models.io_k8s_api_core_v1_pod_signature import IoK8sApiCoreV1PodSignature  # noqa: F401,E501
from kfserving.sdk.models.io_k8s_apimachinery_pkg_apis_meta_v1_time import IoK8sApimachineryPkgApisMetaV1Time  # noqa: F401,E501


class IoK8sApiCoreV1PreferAvoidPodsEntry(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'eviction_time': 'IoK8sApimachineryPkgApisMetaV1Time',
        'message': 'str',
        'pod_signature': 'IoK8sApiCoreV1PodSignature',
        'reason': 'str'
    }

    attribute_map = {
        'eviction_time': 'evictionTime',
        'message': 'message',
        'pod_signature': 'podSignature',
        'reason': 'reason'
    }

    def __init__(self, eviction_time=None, message=None, pod_signature=None, reason=None):  # noqa: E501
        """IoK8sApiCoreV1PreferAvoidPodsEntry - a model defined in Swagger"""  # noqa: E501

        self._eviction_time = None
        self._message = None
        self._pod_signature = None
        self._reason = None
        self.discriminator = None

        if eviction_time is not None:
            self.eviction_time = eviction_time
        if message is not None:
            self.message = message
        self.pod_signature = pod_signature
        if reason is not None:
            self.reason = reason

    @property
    def eviction_time(self):
        """Gets the eviction_time of this IoK8sApiCoreV1PreferAvoidPodsEntry.  # noqa: E501

        Time at which this entry was added to the list.  # noqa: E501

        :return: The eviction_time of this IoK8sApiCoreV1PreferAvoidPodsEntry.  # noqa: E501
        :rtype: IoK8sApimachineryPkgApisMetaV1Time
        """
        return self._eviction_time

    @eviction_time.setter
    def eviction_time(self, eviction_time):
        """Sets the eviction_time of this IoK8sApiCoreV1PreferAvoidPodsEntry.

        Time at which this entry was added to the list.  # noqa: E501

        :param eviction_time: The eviction_time of this IoK8sApiCoreV1PreferAvoidPodsEntry.  # noqa: E501
        :type: IoK8sApimachineryPkgApisMetaV1Time
        """

        self._eviction_time = eviction_time

    @property
    def message(self):
        """Gets the message of this IoK8sApiCoreV1PreferAvoidPodsEntry.  # noqa: E501

        Human readable message indicating why this entry was added to the list.  # noqa: E501

        :return: The message of this IoK8sApiCoreV1PreferAvoidPodsEntry.  # noqa: E501
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this IoK8sApiCoreV1PreferAvoidPodsEntry.

        Human readable message indicating why this entry was added to the list.  # noqa: E501

        :param message: The message of this IoK8sApiCoreV1PreferAvoidPodsEntry.  # noqa: E501
        :type: str
        """

        self._message = message

    @property
    def pod_signature(self):
        """Gets the pod_signature of this IoK8sApiCoreV1PreferAvoidPodsEntry.  # noqa: E501

        The class of pods.  # noqa: E501

        :return: The pod_signature of this IoK8sApiCoreV1PreferAvoidPodsEntry.  # noqa: E501
        :rtype: IoK8sApiCoreV1PodSignature
        """
        return self._pod_signature

    @pod_signature.setter
    def pod_signature(self, pod_signature):
        """Sets the pod_signature of this IoK8sApiCoreV1PreferAvoidPodsEntry.

        The class of pods.  # noqa: E501

        :param pod_signature: The pod_signature of this IoK8sApiCoreV1PreferAvoidPodsEntry.  # noqa: E501
        :type: IoK8sApiCoreV1PodSignature
        """
        if pod_signature is None:
            raise ValueError("Invalid value for `pod_signature`, must not be `None`")  # noqa: E501

        self._pod_signature = pod_signature

    @property
    def reason(self):
        """Gets the reason of this IoK8sApiCoreV1PreferAvoidPodsEntry.  # noqa: E501

        (brief) reason why this entry was added to the list.  # noqa: E501

        :return: The reason of this IoK8sApiCoreV1PreferAvoidPodsEntry.  # noqa: E501
        :rtype: str
        """
        return self._reason

    @reason.setter
    def reason(self, reason):
        """Sets the reason of this IoK8sApiCoreV1PreferAvoidPodsEntry.

        (brief) reason why this entry was added to the list.  # noqa: E501

        :param reason: The reason of this IoK8sApiCoreV1PreferAvoidPodsEntry.  # noqa: E501
        :type: str
        """

        self._reason = reason

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(IoK8sApiCoreV1PreferAvoidPodsEntry, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IoK8sApiCoreV1PreferAvoidPodsEntry):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
