# coding: utf-8

"""
    KFServing

    Python SDK for KFServing  # noqa: E501

    OpenAPI spec version: v0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class IoK8sApiCoreV1PodExecOptions(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'api_version': 'str',
        'command': 'list[str]',
        'container': 'str',
        'kind': 'str',
        'stderr': 'bool',
        'stdin': 'bool',
        'stdout': 'bool',
        'tty': 'bool'
    }

    attribute_map = {
        'api_version': 'apiVersion',
        'command': 'command',
        'container': 'container',
        'kind': 'kind',
        'stderr': 'stderr',
        'stdin': 'stdin',
        'stdout': 'stdout',
        'tty': 'tty'
    }

    def __init__(self, api_version=None, command=None, container=None, kind=None, stderr=None, stdin=None, stdout=None, tty=None):  # noqa: E501
        """IoK8sApiCoreV1PodExecOptions - a model defined in Swagger"""  # noqa: E501

        self._api_version = None
        self._command = None
        self._container = None
        self._kind = None
        self._stderr = None
        self._stdin = None
        self._stdout = None
        self._tty = None
        self.discriminator = None

        if api_version is not None:
            self.api_version = api_version
        self.command = command
        if container is not None:
            self.container = container
        if kind is not None:
            self.kind = kind
        if stderr is not None:
            self.stderr = stderr
        if stdin is not None:
            self.stdin = stdin
        if stdout is not None:
            self.stdout = stdout
        if tty is not None:
            self.tty = tty

    @property
    def api_version(self):
        """Gets the api_version of this IoK8sApiCoreV1PodExecOptions.  # noqa: E501

        APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources  # noqa: E501

        :return: The api_version of this IoK8sApiCoreV1PodExecOptions.  # noqa: E501
        :rtype: str
        """
        return self._api_version

    @api_version.setter
    def api_version(self, api_version):
        """Sets the api_version of this IoK8sApiCoreV1PodExecOptions.

        APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources  # noqa: E501

        :param api_version: The api_version of this IoK8sApiCoreV1PodExecOptions.  # noqa: E501
        :type: str
        """

        self._api_version = api_version

    @property
    def command(self):
        """Gets the command of this IoK8sApiCoreV1PodExecOptions.  # noqa: E501

        Command is the remote command to execute. argv array. Not executed within a shell.  # noqa: E501

        :return: The command of this IoK8sApiCoreV1PodExecOptions.  # noqa: E501
        :rtype: list[str]
        """
        return self._command

    @command.setter
    def command(self, command):
        """Sets the command of this IoK8sApiCoreV1PodExecOptions.

        Command is the remote command to execute. argv array. Not executed within a shell.  # noqa: E501

        :param command: The command of this IoK8sApiCoreV1PodExecOptions.  # noqa: E501
        :type: list[str]
        """
        if command is None:
            raise ValueError("Invalid value for `command`, must not be `None`")  # noqa: E501

        self._command = command

    @property
    def container(self):
        """Gets the container of this IoK8sApiCoreV1PodExecOptions.  # noqa: E501

        Container in which to execute the command. Defaults to only container if there is only one container in the pod.  # noqa: E501

        :return: The container of this IoK8sApiCoreV1PodExecOptions.  # noqa: E501
        :rtype: str
        """
        return self._container

    @container.setter
    def container(self, container):
        """Sets the container of this IoK8sApiCoreV1PodExecOptions.

        Container in which to execute the command. Defaults to only container if there is only one container in the pod.  # noqa: E501

        :param container: The container of this IoK8sApiCoreV1PodExecOptions.  # noqa: E501
        :type: str
        """

        self._container = container

    @property
    def kind(self):
        """Gets the kind of this IoK8sApiCoreV1PodExecOptions.  # noqa: E501

        Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds  # noqa: E501

        :return: The kind of this IoK8sApiCoreV1PodExecOptions.  # noqa: E501
        :rtype: str
        """
        return self._kind

    @kind.setter
    def kind(self, kind):
        """Sets the kind of this IoK8sApiCoreV1PodExecOptions.

        Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds  # noqa: E501

        :param kind: The kind of this IoK8sApiCoreV1PodExecOptions.  # noqa: E501
        :type: str
        """

        self._kind = kind

    @property
    def stderr(self):
        """Gets the stderr of this IoK8sApiCoreV1PodExecOptions.  # noqa: E501

        Redirect the standard error stream of the pod for this call. Defaults to true.  # noqa: E501

        :return: The stderr of this IoK8sApiCoreV1PodExecOptions.  # noqa: E501
        :rtype: bool
        """
        return self._stderr

    @stderr.setter
    def stderr(self, stderr):
        """Sets the stderr of this IoK8sApiCoreV1PodExecOptions.

        Redirect the standard error stream of the pod for this call. Defaults to true.  # noqa: E501

        :param stderr: The stderr of this IoK8sApiCoreV1PodExecOptions.  # noqa: E501
        :type: bool
        """

        self._stderr = stderr

    @property
    def stdin(self):
        """Gets the stdin of this IoK8sApiCoreV1PodExecOptions.  # noqa: E501

        Redirect the standard input stream of the pod for this call. Defaults to false.  # noqa: E501

        :return: The stdin of this IoK8sApiCoreV1PodExecOptions.  # noqa: E501
        :rtype: bool
        """
        return self._stdin

    @stdin.setter
    def stdin(self, stdin):
        """Sets the stdin of this IoK8sApiCoreV1PodExecOptions.

        Redirect the standard input stream of the pod for this call. Defaults to false.  # noqa: E501

        :param stdin: The stdin of this IoK8sApiCoreV1PodExecOptions.  # noqa: E501
        :type: bool
        """

        self._stdin = stdin

    @property
    def stdout(self):
        """Gets the stdout of this IoK8sApiCoreV1PodExecOptions.  # noqa: E501

        Redirect the standard output stream of the pod for this call. Defaults to true.  # noqa: E501

        :return: The stdout of this IoK8sApiCoreV1PodExecOptions.  # noqa: E501
        :rtype: bool
        """
        return self._stdout

    @stdout.setter
    def stdout(self, stdout):
        """Sets the stdout of this IoK8sApiCoreV1PodExecOptions.

        Redirect the standard output stream of the pod for this call. Defaults to true.  # noqa: E501

        :param stdout: The stdout of this IoK8sApiCoreV1PodExecOptions.  # noqa: E501
        :type: bool
        """

        self._stdout = stdout

    @property
    def tty(self):
        """Gets the tty of this IoK8sApiCoreV1PodExecOptions.  # noqa: E501

        TTY if true indicates that a tty will be allocated for the exec call. Defaults to false.  # noqa: E501

        :return: The tty of this IoK8sApiCoreV1PodExecOptions.  # noqa: E501
        :rtype: bool
        """
        return self._tty

    @tty.setter
    def tty(self, tty):
        """Sets the tty of this IoK8sApiCoreV1PodExecOptions.

        TTY if true indicates that a tty will be allocated for the exec call. Defaults to false.  # noqa: E501

        :param tty: The tty of this IoK8sApiCoreV1PodExecOptions.  # noqa: E501
        :type: bool
        """

        self._tty = tty

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(IoK8sApiCoreV1PodExecOptions, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IoK8sApiCoreV1PodExecOptions):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
