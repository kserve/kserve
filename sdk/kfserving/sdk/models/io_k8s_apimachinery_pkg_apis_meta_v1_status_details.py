# coding: utf-8

"""
    KFServing

    Python SDK for KFServing  # noqa: E501

    OpenAPI spec version: v0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from kfserving.sdk.models.io_k8s_apimachinery_pkg_apis_meta_v1_status_cause import IoK8sApimachineryPkgApisMetaV1StatusCause  # noqa: F401,E501


class IoK8sApimachineryPkgApisMetaV1StatusDetails(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'causes': 'list[IoK8sApimachineryPkgApisMetaV1StatusCause]',
        'group': 'str',
        'kind': 'str',
        'name': 'str',
        'retry_after_seconds': 'int',
        'uid': 'str'
    }

    attribute_map = {
        'causes': 'causes',
        'group': 'group',
        'kind': 'kind',
        'name': 'name',
        'retry_after_seconds': 'retryAfterSeconds',
        'uid': 'uid'
    }

    def __init__(self, causes=None, group=None, kind=None, name=None, retry_after_seconds=None, uid=None):  # noqa: E501
        """IoK8sApimachineryPkgApisMetaV1StatusDetails - a model defined in Swagger"""  # noqa: E501

        self._causes = None
        self._group = None
        self._kind = None
        self._name = None
        self._retry_after_seconds = None
        self._uid = None
        self.discriminator = None

        if causes is not None:
            self.causes = causes
        if group is not None:
            self.group = group
        if kind is not None:
            self.kind = kind
        if name is not None:
            self.name = name
        if retry_after_seconds is not None:
            self.retry_after_seconds = retry_after_seconds
        if uid is not None:
            self.uid = uid

    @property
    def causes(self):
        """Gets the causes of this IoK8sApimachineryPkgApisMetaV1StatusDetails.  # noqa: E501

        The Causes array includes more details associated with the StatusReason failure. Not all StatusReasons may provide detailed causes.  # noqa: E501

        :return: The causes of this IoK8sApimachineryPkgApisMetaV1StatusDetails.  # noqa: E501
        :rtype: list[IoK8sApimachineryPkgApisMetaV1StatusCause]
        """
        return self._causes

    @causes.setter
    def causes(self, causes):
        """Sets the causes of this IoK8sApimachineryPkgApisMetaV1StatusDetails.

        The Causes array includes more details associated with the StatusReason failure. Not all StatusReasons may provide detailed causes.  # noqa: E501

        :param causes: The causes of this IoK8sApimachineryPkgApisMetaV1StatusDetails.  # noqa: E501
        :type: list[IoK8sApimachineryPkgApisMetaV1StatusCause]
        """

        self._causes = causes

    @property
    def group(self):
        """Gets the group of this IoK8sApimachineryPkgApisMetaV1StatusDetails.  # noqa: E501

        The group attribute of the resource associated with the status StatusReason.  # noqa: E501

        :return: The group of this IoK8sApimachineryPkgApisMetaV1StatusDetails.  # noqa: E501
        :rtype: str
        """
        return self._group

    @group.setter
    def group(self, group):
        """Sets the group of this IoK8sApimachineryPkgApisMetaV1StatusDetails.

        The group attribute of the resource associated with the status StatusReason.  # noqa: E501

        :param group: The group of this IoK8sApimachineryPkgApisMetaV1StatusDetails.  # noqa: E501
        :type: str
        """

        self._group = group

    @property
    def kind(self):
        """Gets the kind of this IoK8sApimachineryPkgApisMetaV1StatusDetails.  # noqa: E501

        The kind attribute of the resource associated with the status StatusReason. On some operations may differ from the requested resource Kind. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds  # noqa: E501

        :return: The kind of this IoK8sApimachineryPkgApisMetaV1StatusDetails.  # noqa: E501
        :rtype: str
        """
        return self._kind

    @kind.setter
    def kind(self, kind):
        """Sets the kind of this IoK8sApimachineryPkgApisMetaV1StatusDetails.

        The kind attribute of the resource associated with the status StatusReason. On some operations may differ from the requested resource Kind. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds  # noqa: E501

        :param kind: The kind of this IoK8sApimachineryPkgApisMetaV1StatusDetails.  # noqa: E501
        :type: str
        """

        self._kind = kind

    @property
    def name(self):
        """Gets the name of this IoK8sApimachineryPkgApisMetaV1StatusDetails.  # noqa: E501

        The name attribute of the resource associated with the status StatusReason (when there is a single name which can be described).  # noqa: E501

        :return: The name of this IoK8sApimachineryPkgApisMetaV1StatusDetails.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this IoK8sApimachineryPkgApisMetaV1StatusDetails.

        The name attribute of the resource associated with the status StatusReason (when there is a single name which can be described).  # noqa: E501

        :param name: The name of this IoK8sApimachineryPkgApisMetaV1StatusDetails.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def retry_after_seconds(self):
        """Gets the retry_after_seconds of this IoK8sApimachineryPkgApisMetaV1StatusDetails.  # noqa: E501

        If specified, the time in seconds before the operation should be retried. Some errors may indicate the client must take an alternate action - for those errors this field may indicate how long to wait before taking the alternate action.  # noqa: E501

        :return: The retry_after_seconds of this IoK8sApimachineryPkgApisMetaV1StatusDetails.  # noqa: E501
        :rtype: int
        """
        return self._retry_after_seconds

    @retry_after_seconds.setter
    def retry_after_seconds(self, retry_after_seconds):
        """Sets the retry_after_seconds of this IoK8sApimachineryPkgApisMetaV1StatusDetails.

        If specified, the time in seconds before the operation should be retried. Some errors may indicate the client must take an alternate action - for those errors this field may indicate how long to wait before taking the alternate action.  # noqa: E501

        :param retry_after_seconds: The retry_after_seconds of this IoK8sApimachineryPkgApisMetaV1StatusDetails.  # noqa: E501
        :type: int
        """

        self._retry_after_seconds = retry_after_seconds

    @property
    def uid(self):
        """Gets the uid of this IoK8sApimachineryPkgApisMetaV1StatusDetails.  # noqa: E501

        UID of the resource. (when there is a single resource which can be described). More info: http://kubernetes.io/docs/user-guide/identifiers#uids  # noqa: E501

        :return: The uid of this IoK8sApimachineryPkgApisMetaV1StatusDetails.  # noqa: E501
        :rtype: str
        """
        return self._uid

    @uid.setter
    def uid(self, uid):
        """Sets the uid of this IoK8sApimachineryPkgApisMetaV1StatusDetails.

        UID of the resource. (when there is a single resource which can be described). More info: http://kubernetes.io/docs/user-guide/identifiers#uids  # noqa: E501

        :param uid: The uid of this IoK8sApimachineryPkgApisMetaV1StatusDetails.  # noqa: E501
        :type: str
        """

        self._uid = uid

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(IoK8sApimachineryPkgApisMetaV1StatusDetails, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IoK8sApimachineryPkgApisMetaV1StatusDetails):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
