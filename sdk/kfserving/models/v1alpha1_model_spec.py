# coding: utf-8

"""
    KFServing

    Python SDK for KFServing  # noqa: E501

    OpenAPI spec version: v0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from kfserving.models.v1alpha1_custom_spec import V1alpha1CustomSpec  # noqa: F401,E501
from kfserving.models.v1alpha1_py_torch_spec import V1alpha1PyTorchSpec  # noqa: F401,E501
from kfserving.models.v1alpha1_sk_learn_spec import V1alpha1SKLearnSpec  # noqa: F401,E501
from kfserving.models.v1alpha1_tensor_rt_spec import V1alpha1TensorRTSpec  # noqa: F401,E501
from kfserving.models.v1alpha1_tensorflow_spec import V1alpha1TensorflowSpec  # noqa: F401,E501
from kfserving.models.v1alpha1_xg_boost_spec import V1alpha1XGBoostSpec  # noqa: F401,E501


class V1alpha1ModelSpec(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'custom': 'V1alpha1CustomSpec',
        'max_replicas': 'int',
        'min_replicas': 'int',
        'pytorch': 'V1alpha1PyTorchSpec',
        'service_account_name': 'str',
        'sklearn': 'V1alpha1SKLearnSpec',
        'tensorflow': 'V1alpha1TensorflowSpec',
        'tensorrt': 'V1alpha1TensorRTSpec',
        'xgboost': 'V1alpha1XGBoostSpec'
    }

    attribute_map = {
        'custom': 'custom',
        'max_replicas': 'maxReplicas',
        'min_replicas': 'minReplicas',
        'pytorch': 'pytorch',
        'service_account_name': 'serviceAccountName',
        'sklearn': 'sklearn',
        'tensorflow': 'tensorflow',
        'tensorrt': 'tensorrt',
        'xgboost': 'xgboost'
    }

    def __init__(self, custom=None, max_replicas=None, min_replicas=None, pytorch=None, service_account_name=None, sklearn=None, tensorflow=None, tensorrt=None, xgboost=None):  # noqa: E501
        """V1alpha1ModelSpec - a model defined in Swagger"""  # noqa: E501

        self._custom = None
        self._max_replicas = None
        self._min_replicas = None
        self._pytorch = None
        self._service_account_name = None
        self._sklearn = None
        self._tensorflow = None
        self._tensorrt = None
        self._xgboost = None
        self.discriminator = None

        if custom is not None:
            self.custom = custom
        if max_replicas is not None:
            self.max_replicas = max_replicas
        if min_replicas is not None:
            self.min_replicas = min_replicas
        if pytorch is not None:
            self.pytorch = pytorch
        if service_account_name is not None:
            self.service_account_name = service_account_name
        if sklearn is not None:
            self.sklearn = sklearn
        if tensorflow is not None:
            self.tensorflow = tensorflow
        if tensorrt is not None:
            self.tensorrt = tensorrt
        if xgboost is not None:
            self.xgboost = xgboost

    @property
    def custom(self):
        """Gets the custom of this V1alpha1ModelSpec.  # noqa: E501

        The following fields follow a \"1-of\" semantic. Users must specify exactly one openapispec.  # noqa: E501

        :return: The custom of this V1alpha1ModelSpec.  # noqa: E501
        :rtype: V1alpha1CustomSpec
        """
        return self._custom

    @custom.setter
    def custom(self, custom):
        """Sets the custom of this V1alpha1ModelSpec.

        The following fields follow a \"1-of\" semantic. Users must specify exactly one openapispec.  # noqa: E501

        :param custom: The custom of this V1alpha1ModelSpec.  # noqa: E501
        :type: V1alpha1CustomSpec
        """

        self._custom = custom

    @property
    def max_replicas(self):
        """Gets the max_replicas of this V1alpha1ModelSpec.  # noqa: E501

        This is the up bound for autoscaler to scale to  # noqa: E501

        :return: The max_replicas of this V1alpha1ModelSpec.  # noqa: E501
        :rtype: int
        """
        return self._max_replicas

    @max_replicas.setter
    def max_replicas(self, max_replicas):
        """Sets the max_replicas of this V1alpha1ModelSpec.

        This is the up bound for autoscaler to scale to  # noqa: E501

        :param max_replicas: The max_replicas of this V1alpha1ModelSpec.  # noqa: E501
        :type: int
        """

        self._max_replicas = max_replicas

    @property
    def min_replicas(self):
        """Gets the min_replicas of this V1alpha1ModelSpec.  # noqa: E501

        Minimum number of replicas, pods won't scale down to 0 in case of no traffic  # noqa: E501

        :return: The min_replicas of this V1alpha1ModelSpec.  # noqa: E501
        :rtype: int
        """
        return self._min_replicas

    @min_replicas.setter
    def min_replicas(self, min_replicas):
        """Sets the min_replicas of this V1alpha1ModelSpec.

        Minimum number of replicas, pods won't scale down to 0 in case of no traffic  # noqa: E501

        :param min_replicas: The min_replicas of this V1alpha1ModelSpec.  # noqa: E501
        :type: int
        """

        self._min_replicas = min_replicas

    @property
    def pytorch(self):
        """Gets the pytorch of this V1alpha1ModelSpec.  # noqa: E501


        :return: The pytorch of this V1alpha1ModelSpec.  # noqa: E501
        :rtype: V1alpha1PyTorchSpec
        """
        return self._pytorch

    @pytorch.setter
    def pytorch(self, pytorch):
        """Sets the pytorch of this V1alpha1ModelSpec.


        :param pytorch: The pytorch of this V1alpha1ModelSpec.  # noqa: E501
        :type: V1alpha1PyTorchSpec
        """

        self._pytorch = pytorch

    @property
    def service_account_name(self):
        """Gets the service_account_name of this V1alpha1ModelSpec.  # noqa: E501

        Service Account Name  # noqa: E501

        :return: The service_account_name of this V1alpha1ModelSpec.  # noqa: E501
        :rtype: str
        """
        return self._service_account_name

    @service_account_name.setter
    def service_account_name(self, service_account_name):
        """Sets the service_account_name of this V1alpha1ModelSpec.

        Service Account Name  # noqa: E501

        :param service_account_name: The service_account_name of this V1alpha1ModelSpec.  # noqa: E501
        :type: str
        """

        self._service_account_name = service_account_name

    @property
    def sklearn(self):
        """Gets the sklearn of this V1alpha1ModelSpec.  # noqa: E501


        :return: The sklearn of this V1alpha1ModelSpec.  # noqa: E501
        :rtype: V1alpha1SKLearnSpec
        """
        return self._sklearn

    @sklearn.setter
    def sklearn(self, sklearn):
        """Sets the sklearn of this V1alpha1ModelSpec.


        :param sklearn: The sklearn of this V1alpha1ModelSpec.  # noqa: E501
        :type: V1alpha1SKLearnSpec
        """

        self._sklearn = sklearn

    @property
    def tensorflow(self):
        """Gets the tensorflow of this V1alpha1ModelSpec.  # noqa: E501


        :return: The tensorflow of this V1alpha1ModelSpec.  # noqa: E501
        :rtype: V1alpha1TensorflowSpec
        """
        return self._tensorflow

    @tensorflow.setter
    def tensorflow(self, tensorflow):
        """Sets the tensorflow of this V1alpha1ModelSpec.


        :param tensorflow: The tensorflow of this V1alpha1ModelSpec.  # noqa: E501
        :type: V1alpha1TensorflowSpec
        """

        self._tensorflow = tensorflow

    @property
    def tensorrt(self):
        """Gets the tensorrt of this V1alpha1ModelSpec.  # noqa: E501


        :return: The tensorrt of this V1alpha1ModelSpec.  # noqa: E501
        :rtype: V1alpha1TensorRTSpec
        """
        return self._tensorrt

    @tensorrt.setter
    def tensorrt(self, tensorrt):
        """Sets the tensorrt of this V1alpha1ModelSpec.


        :param tensorrt: The tensorrt of this V1alpha1ModelSpec.  # noqa: E501
        :type: V1alpha1TensorRTSpec
        """

        self._tensorrt = tensorrt

    @property
    def xgboost(self):
        """Gets the xgboost of this V1alpha1ModelSpec.  # noqa: E501


        :return: The xgboost of this V1alpha1ModelSpec.  # noqa: E501
        :rtype: V1alpha1XGBoostSpec
        """
        return self._xgboost

    @xgboost.setter
    def xgboost(self, xgboost):
        """Sets the xgboost of this V1alpha1ModelSpec.


        :param xgboost: The xgboost of this V1alpha1ModelSpec.  # noqa: E501
        :type: V1alpha1XGBoostSpec
        """

        self._xgboost = xgboost

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(V1alpha1ModelSpec, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V1alpha1ModelSpec):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
