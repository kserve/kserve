# coding: utf-8

"""
    KFServing

    Python SDK for KFServing  # noqa: E501

    OpenAPI spec version: v0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from kfserving.models.v1alpha1_framework_config import V1alpha1FrameworkConfig  # noqa: F401,E501


class V1alpha1FrameworksConfig(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'pytorch': 'V1alpha1FrameworkConfig',
        'sklearn': 'V1alpha1FrameworkConfig',
        'tensorflow': 'V1alpha1FrameworkConfig',
        'tensorrt': 'V1alpha1FrameworkConfig',
        'xgboost': 'V1alpha1FrameworkConfig'
    }

    attribute_map = {
        'pytorch': 'pytorch',
        'sklearn': 'sklearn',
        'tensorflow': 'tensorflow',
        'tensorrt': 'tensorrt',
        'xgboost': 'xgboost'
    }

    def __init__(self, pytorch=None, sklearn=None, tensorflow=None, tensorrt=None, xgboost=None):  # noqa: E501
        """V1alpha1FrameworksConfig - a model defined in Swagger"""  # noqa: E501

        self._pytorch = None
        self._sklearn = None
        self._tensorflow = None
        self._tensorrt = None
        self._xgboost = None
        self.discriminator = None

        if pytorch is not None:
            self.pytorch = pytorch
        if sklearn is not None:
            self.sklearn = sklearn
        if tensorflow is not None:
            self.tensorflow = tensorflow
        if tensorrt is not None:
            self.tensorrt = tensorrt
        if xgboost is not None:
            self.xgboost = xgboost

    @property
    def pytorch(self):
        """Gets the pytorch of this V1alpha1FrameworksConfig.  # noqa: E501


        :return: The pytorch of this V1alpha1FrameworksConfig.  # noqa: E501
        :rtype: V1alpha1FrameworkConfig
        """
        return self._pytorch

    @pytorch.setter
    def pytorch(self, pytorch):
        """Sets the pytorch of this V1alpha1FrameworksConfig.


        :param pytorch: The pytorch of this V1alpha1FrameworksConfig.  # noqa: E501
        :type: V1alpha1FrameworkConfig
        """

        self._pytorch = pytorch

    @property
    def sklearn(self):
        """Gets the sklearn of this V1alpha1FrameworksConfig.  # noqa: E501


        :return: The sklearn of this V1alpha1FrameworksConfig.  # noqa: E501
        :rtype: V1alpha1FrameworkConfig
        """
        return self._sklearn

    @sklearn.setter
    def sklearn(self, sklearn):
        """Sets the sklearn of this V1alpha1FrameworksConfig.


        :param sklearn: The sklearn of this V1alpha1FrameworksConfig.  # noqa: E501
        :type: V1alpha1FrameworkConfig
        """

        self._sklearn = sklearn

    @property
    def tensorflow(self):
        """Gets the tensorflow of this V1alpha1FrameworksConfig.  # noqa: E501


        :return: The tensorflow of this V1alpha1FrameworksConfig.  # noqa: E501
        :rtype: V1alpha1FrameworkConfig
        """
        return self._tensorflow

    @tensorflow.setter
    def tensorflow(self, tensorflow):
        """Sets the tensorflow of this V1alpha1FrameworksConfig.


        :param tensorflow: The tensorflow of this V1alpha1FrameworksConfig.  # noqa: E501
        :type: V1alpha1FrameworkConfig
        """

        self._tensorflow = tensorflow

    @property
    def tensorrt(self):
        """Gets the tensorrt of this V1alpha1FrameworksConfig.  # noqa: E501


        :return: The tensorrt of this V1alpha1FrameworksConfig.  # noqa: E501
        :rtype: V1alpha1FrameworkConfig
        """
        return self._tensorrt

    @tensorrt.setter
    def tensorrt(self, tensorrt):
        """Sets the tensorrt of this V1alpha1FrameworksConfig.


        :param tensorrt: The tensorrt of this V1alpha1FrameworksConfig.  # noqa: E501
        :type: V1alpha1FrameworkConfig
        """

        self._tensorrt = tensorrt

    @property
    def xgboost(self):
        """Gets the xgboost of this V1alpha1FrameworksConfig.  # noqa: E501


        :return: The xgboost of this V1alpha1FrameworksConfig.  # noqa: E501
        :rtype: V1alpha1FrameworkConfig
        """
        return self._xgboost

    @xgboost.setter
    def xgboost(self, xgboost):
        """Sets the xgboost of this V1alpha1FrameworksConfig.


        :param xgboost: The xgboost of this V1alpha1FrameworksConfig.  # noqa: E501
        :type: V1alpha1FrameworkConfig
        """

        self._xgboost = xgboost

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(V1alpha1FrameworksConfig, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V1alpha1FrameworksConfig):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
