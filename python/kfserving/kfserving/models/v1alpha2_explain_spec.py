# coding: utf-8

"""
    KFServing

    Python SDK for KFServing  # noqa: E501

    OpenAPI spec version: v0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from kfserving.models.v1alpha2_alibi_explain_spec import V1alpha2AlibiExplainSpec  # noqa: F401,E501
from kfserving.models.v1alpha2_custom_spec import V1alpha2CustomSpec  # noqa: F401,E501


class V1alpha2ExplainSpec(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'alibi': 'V1alpha2AlibiExplainSpec',
        'custom': 'V1alpha2CustomSpec'
    }

    attribute_map = {
        'alibi': 'alibi',
        'custom': 'custom'
    }

    def __init__(self, alibi=None, custom=None):  # noqa: E501
        """V1alpha2ExplainSpec - a model defined in Swagger"""  # noqa: E501

        self._alibi = None
        self._custom = None
        self.discriminator = None

        if alibi is not None:
            self.alibi = alibi
        if custom is not None:
            self.custom = custom

    @property
    def alibi(self):
        """Gets the alibi of this V1alpha2ExplainSpec.  # noqa: E501

        The following fields follow a \"1-of\" semantic. Users must specify exactly one openapispec.  # noqa: E501

        :return: The alibi of this V1alpha2ExplainSpec.  # noqa: E501
        :rtype: V1alpha2AlibiExplainSpec
        """
        return self._alibi

    @alibi.setter
    def alibi(self, alibi):
        """Sets the alibi of this V1alpha2ExplainSpec.

        The following fields follow a \"1-of\" semantic. Users must specify exactly one openapispec.  # noqa: E501

        :param alibi: The alibi of this V1alpha2ExplainSpec.  # noqa: E501
        :type: V1alpha2AlibiExplainSpec
        """

        self._alibi = alibi

    @property
    def custom(self):
        """Gets the custom of this V1alpha2ExplainSpec.  # noqa: E501


        :return: The custom of this V1alpha2ExplainSpec.  # noqa: E501
        :rtype: V1alpha2CustomSpec
        """
        return self._custom

    @custom.setter
    def custom(self, custom):
        """Sets the custom of this V1alpha2ExplainSpec.


        :param custom: The custom of this V1alpha2ExplainSpec.  # noqa: E501
        :type: V1alpha2CustomSpec
        """

        self._custom = custom

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(V1alpha2ExplainSpec, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V1alpha2ExplainSpec):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
