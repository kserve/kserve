# Copyright 2023 The KServe Authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# coding: utf-8

"""
    KServe

    Python SDK for KServe

    The version of the OpenAPI document: v0.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel, StrictInt, StrictStr
from pydantic import Field
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class V1alpha1InferenceStep(BaseModel):
    """
    InferenceStep defines the inference target of the current step with condition, weights and data.
    """ # noqa: E501
    condition: Optional[StrictStr] = Field(default=None, description="routing based on the condition")
    data: Optional[StrictStr] = Field(default=None, description="request data sent to the next route with input/output from the previous step $request $response.predictions")
    dependency: Optional[StrictStr] = Field(default=None, description="to decide whether a step is a hard or a soft dependency in the Inference Graph")
    name: Optional[StrictStr] = Field(default=None, description="Unique name for the step within this node")
    node_name: Optional[StrictStr] = Field(default=None, description="The node name for routing as next step", alias="nodeName")
    service_name: Optional[StrictStr] = Field(default=None, description="named reference for InferenceService", alias="serviceName")
    service_url: Optional[StrictStr] = Field(default=None, description="InferenceService URL, mutually exclusive with ServiceName", alias="serviceUrl")
    weight: Optional[StrictInt] = Field(default=None, description="the weight for split of the traffic, only used for Split Router when weight is specified all the routing targets should be sum to 100")
    __properties: ClassVar[List[str]] = ["condition", "data", "dependency", "name", "nodeName", "serviceName", "serviceUrl", "weight"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of V1alpha1InferenceStep from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of V1alpha1InferenceStep from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "condition": obj.get("condition"),
            "data": obj.get("data"),
            "dependency": obj.get("dependency"),
            "name": obj.get("name"),
            "nodeName": obj.get("nodeName"),
            "serviceName": obj.get("serviceName"),
            "serviceUrl": obj.get("serviceUrl"),
            "weight": obj.get("weight")
        })
        return _obj


