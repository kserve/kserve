# Copyright 2023 The KServe Authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# coding: utf-8

"""
    KServe

    Python SDK for KServe

    The version of the OpenAPI document: v0.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel, StrictInt, StrictStr
from pydantic import Field
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class V1beta1FailureInfo(BaseModel):
    """
    V1beta1FailureInfo
    """ # noqa: E501
    exit_code: Optional[StrictInt] = Field(default=None, description="Exit status from the last termination of the container", alias="exitCode")
    location: Optional[StrictStr] = Field(default=None, description="Name of component to which the failure relates (usually Pod name)")
    message: Optional[StrictStr] = Field(default=None, description="Detailed error message")
    model_revision_name: Optional[StrictStr] = Field(default=None, description="Internal Revision/ID of model, tied to specific Spec contents", alias="modelRevisionName")
    reason: Optional[StrictStr] = Field(default=None, description="High level class of failure")
    time: Optional[V1Time] = None
    __properties: ClassVar[List[str]] = ["exitCode", "location", "message", "modelRevisionName", "reason", "time"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of V1beta1FailureInfo from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of time
        if self.time:
            _dict['time'] = self.time.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of V1beta1FailureInfo from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "exitCode": obj.get("exitCode"),
            "location": obj.get("location"),
            "message": obj.get("message"),
            "modelRevisionName": obj.get("modelRevisionName"),
            "reason": obj.get("reason"),
            "time": V1Time.from_dict(obj.get("time")) if obj.get("time") is not None else None
        })
        return _obj


