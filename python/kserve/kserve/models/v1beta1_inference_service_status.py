# Copyright 2023 The KServe Authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# coding: utf-8

"""
    KServe

    Python SDK for KServe

    The version of the OpenAPI document: v0.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel, StrictInt, StrictStr
from pydantic import Field
from kserve.models.v1beta1_component_status_spec import V1beta1ComponentStatusSpec
from kserve.models.v1beta1_model_status import V1beta1ModelStatus
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class V1beta1InferenceServiceStatus(BaseModel):
    """
    InferenceServiceStatus defines the observed state of InferenceService
    """ # noqa: E501
    address: Optional[KnativeAddressable] = None
    annotations: Optional[Dict[str, StrictStr]] = Field(default=None, description="Annotations is additional Status fields for the Resource to save some additional State as well as convey more information to the user. This is roughly akin to Annotations on any k8s resource, just the reconciler conveying richer information outwards.")
    components: Optional[Dict[str, V1beta1ComponentStatusSpec]] = Field(default=None, description="Statuses for the components of the InferenceService")
    conditions: Optional[List[KnativeCondition]] = Field(default=None, description="Conditions the latest available observations of a resource's current state.")
    model_status: Optional[V1beta1ModelStatus] = Field(default=None, alias="modelStatus")
    observed_generation: Optional[StrictInt] = Field(default=None, description="ObservedGeneration is the 'Generation' of the Service that was last processed by the controller.", alias="observedGeneration")
    url: Optional[KnativeURL] = None
    __properties: ClassVar[List[str]] = ["address", "annotations", "components", "conditions", "modelStatus", "observedGeneration", "url"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of V1beta1InferenceServiceStatus from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of address
        if self.address:
            _dict['address'] = self.address.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each value in components (dict)
        _field_dict = {}
        if self.components:
            for _key in self.components:
                if self.components[_key]:
                    _field_dict[_key] = self.components[_key].to_dict()
            _dict['components'] = _field_dict
        # override the default output from pydantic by calling `to_dict()` of each item in conditions (list)
        _items = []
        if self.conditions:
            for _item in self.conditions:
                if _item:
                    _items.append(_item.to_dict())
            _dict['conditions'] = _items
        # override the default output from pydantic by calling `to_dict()` of model_status
        if self.model_status:
            _dict['modelStatus'] = self.model_status.to_dict()
        # override the default output from pydantic by calling `to_dict()` of url
        if self.url:
            _dict['url'] = self.url.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of V1beta1InferenceServiceStatus from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "address": KnativeAddressable.from_dict(obj.get("address")) if obj.get("address") is not None else None,
            "annotations": obj.get("annotations"),
            "components": dict(
                (_k, V1beta1ComponentStatusSpec.from_dict(_v))
                for _k, _v in obj.get("components").items()
            )
            if obj.get("components") is not None
            else None,
            "conditions": [KnativeCondition.from_dict(_item) for _item in obj.get("conditions")] if obj.get("conditions") is not None else None,
            "modelStatus": V1beta1ModelStatus.from_dict(obj.get("modelStatus")) if obj.get("modelStatus") is not None else None,
            "observedGeneration": obj.get("observedGeneration"),
            "url": KnativeURL.from_dict(obj.get("url")) if obj.get("url") is not None else None
        })
        return _obj


