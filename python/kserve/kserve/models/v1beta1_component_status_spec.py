# Copyright 2023 The KServe Authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# coding: utf-8

"""
    KServe

    Python SDK for KServe

    The version of the OpenAPI document: v0.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel, StrictStr
from pydantic import Field
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class V1beta1ComponentStatusSpec(BaseModel):
    """
    ComponentStatusSpec describes the state of the component
    """ # noqa: E501
    address: Optional[KnativeAddressable] = None
    grpc_url: Optional[KnativeURL] = Field(default=None, alias="grpcUrl")
    latest_created_revision: Optional[StrictStr] = Field(default=None, description="Latest revision name that is created", alias="latestCreatedRevision")
    latest_ready_revision: Optional[StrictStr] = Field(default=None, description="Latest revision name that is in ready state", alias="latestReadyRevision")
    latest_rolledout_revision: Optional[StrictStr] = Field(default=None, description="Latest revision name that is rolled out with 100 percent traffic", alias="latestRolledoutRevision")
    previous_rolledout_revision: Optional[StrictStr] = Field(default=None, description="Previous revision name that is rolled out with 100 percent traffic", alias="previousRolledoutRevision")
    rest_url: Optional[KnativeURL] = Field(default=None, alias="restUrl")
    traffic: Optional[List[KnativeDevServingPkgApisServingV1TrafficTarget]] = Field(default=None, description="Traffic holds the configured traffic distribution for latest ready revision and previous rolled out revision.")
    url: Optional[KnativeURL] = None
    __properties: ClassVar[List[str]] = ["address", "grpcUrl", "latestCreatedRevision", "latestReadyRevision", "latestRolledoutRevision", "previousRolledoutRevision", "restUrl", "traffic", "url"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of V1beta1ComponentStatusSpec from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of address
        if self.address:
            _dict['address'] = self.address.to_dict()
        # override the default output from pydantic by calling `to_dict()` of grpc_url
        if self.grpc_url:
            _dict['grpcUrl'] = self.grpc_url.to_dict()
        # override the default output from pydantic by calling `to_dict()` of rest_url
        if self.rest_url:
            _dict['restUrl'] = self.rest_url.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in traffic (list)
        _items = []
        if self.traffic:
            for _item in self.traffic:
                if _item:
                    _items.append(_item.to_dict())
            _dict['traffic'] = _items
        # override the default output from pydantic by calling `to_dict()` of url
        if self.url:
            _dict['url'] = self.url.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of V1beta1ComponentStatusSpec from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "address": KnativeAddressable.from_dict(obj.get("address")) if obj.get("address") is not None else None,
            "grpcUrl": KnativeURL.from_dict(obj.get("grpcUrl")) if obj.get("grpcUrl") is not None else None,
            "latestCreatedRevision": obj.get("latestCreatedRevision"),
            "latestReadyRevision": obj.get("latestReadyRevision"),
            "latestRolledoutRevision": obj.get("latestRolledoutRevision"),
            "previousRolledoutRevision": obj.get("previousRolledoutRevision"),
            "restUrl": KnativeURL.from_dict(obj.get("restUrl")) if obj.get("restUrl") is not None else None,
            "traffic": [KnativeDevServingPkgApisServingV1TrafficTarget.from_dict(_item) for _item in obj.get("traffic")] if obj.get("traffic") is not None else None,
            "url": KnativeURL.from_dict(obj.get("url")) if obj.get("url") is not None else None
        })
        return _obj


