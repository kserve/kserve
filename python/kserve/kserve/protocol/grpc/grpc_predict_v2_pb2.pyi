"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
Copyright 2022 The KServe Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

   http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
"""

import builtins
import collections.abc
import google.protobuf.descriptor
import google.protobuf.internal.containers
import google.protobuf.message
import typing

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor

@typing.final
class ServerLiveRequest(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    def __init__(
        self,
    ) -> None: ...

global___ServerLiveRequest = ServerLiveRequest

@typing.final
class ServerLiveResponse(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    LIVE_FIELD_NUMBER: builtins.int
    live: builtins.bool
    """True if the inference server is live, false if not live."""
    def __init__(
        self,
        *,
        live: builtins.bool = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["live", b"live"]) -> None: ...

global___ServerLiveResponse = ServerLiveResponse

@typing.final
class ServerReadyRequest(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    def __init__(
        self,
    ) -> None: ...

global___ServerReadyRequest = ServerReadyRequest

@typing.final
class ServerReadyResponse(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    READY_FIELD_NUMBER: builtins.int
    ready: builtins.bool
    """True if the inference server is ready, false if not ready."""
    def __init__(
        self,
        *,
        ready: builtins.bool = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["ready", b"ready"]) -> None: ...

global___ServerReadyResponse = ServerReadyResponse

@typing.final
class ModelReadyRequest(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    NAME_FIELD_NUMBER: builtins.int
    VERSION_FIELD_NUMBER: builtins.int
    name: builtins.str
    """The name of the model to check for readiness."""
    version: builtins.str
    """The version of the model to check for readiness. If not given the
    server will choose a version based on the model and internal policy.
    """
    def __init__(
        self,
        *,
        name: builtins.str = ...,
        version: builtins.str = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["name", b"name", "version", b"version"]) -> None: ...

global___ModelReadyRequest = ModelReadyRequest

@typing.final
class ModelReadyResponse(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    READY_FIELD_NUMBER: builtins.int
    ready: builtins.bool
    """True if the model is ready, false if not ready."""
    def __init__(
        self,
        *,
        ready: builtins.bool = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["ready", b"ready"]) -> None: ...

global___ModelReadyResponse = ModelReadyResponse

@typing.final
class ServerMetadataRequest(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    def __init__(
        self,
    ) -> None: ...

global___ServerMetadataRequest = ServerMetadataRequest

@typing.final
class ServerMetadataResponse(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    NAME_FIELD_NUMBER: builtins.int
    VERSION_FIELD_NUMBER: builtins.int
    EXTENSIONS_FIELD_NUMBER: builtins.int
    name: builtins.str
    """The server name."""
    version: builtins.str
    """The server version."""
    @property
    def extensions(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.str]:
        """The extensions supported by the server."""

    def __init__(
        self,
        *,
        name: builtins.str = ...,
        version: builtins.str = ...,
        extensions: collections.abc.Iterable[builtins.str] | None = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["extensions", b"extensions", "name", b"name", "version", b"version"]) -> None: ...

global___ServerMetadataResponse = ServerMetadataResponse

@typing.final
class ModelMetadataRequest(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    NAME_FIELD_NUMBER: builtins.int
    VERSION_FIELD_NUMBER: builtins.int
    name: builtins.str
    """The name of the model."""
    version: builtins.str
    """The version of the model to check for readiness. If not given the
    server will choose a version based on the model and internal policy.
    """
    def __init__(
        self,
        *,
        name: builtins.str = ...,
        version: builtins.str = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["name", b"name", "version", b"version"]) -> None: ...

global___ModelMetadataRequest = ModelMetadataRequest

@typing.final
class ModelMetadataResponse(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    @typing.final
    class TensorMetadata(google.protobuf.message.Message):
        """Metadata for a tensor."""

        DESCRIPTOR: google.protobuf.descriptor.Descriptor

        NAME_FIELD_NUMBER: builtins.int
        DATATYPE_FIELD_NUMBER: builtins.int
        SHAPE_FIELD_NUMBER: builtins.int
        name: builtins.str
        """The tensor name."""
        datatype: builtins.str
        """The tensor data type."""
        @property
        def shape(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.int]:
            """The tensor shape. A variable-size dimension is represented
            by a -1 value.
            """

        def __init__(
            self,
            *,
            name: builtins.str = ...,
            datatype: builtins.str = ...,
            shape: collections.abc.Iterable[builtins.int] | None = ...,
        ) -> None: ...
        def ClearField(self, field_name: typing.Literal["datatype", b"datatype", "name", b"name", "shape", b"shape"]) -> None: ...

    NAME_FIELD_NUMBER: builtins.int
    VERSIONS_FIELD_NUMBER: builtins.int
    PLATFORM_FIELD_NUMBER: builtins.int
    INPUTS_FIELD_NUMBER: builtins.int
    OUTPUTS_FIELD_NUMBER: builtins.int
    name: builtins.str
    """The model name."""
    platform: builtins.str
    """The model's platform. See Platforms."""
    @property
    def versions(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.str]:
        """The versions of the model available on the server."""

    @property
    def inputs(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___ModelMetadataResponse.TensorMetadata]:
        """The model's inputs."""

    @property
    def outputs(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___ModelMetadataResponse.TensorMetadata]:
        """The model's outputs."""

    def __init__(
        self,
        *,
        name: builtins.str = ...,
        versions: collections.abc.Iterable[builtins.str] | None = ...,
        platform: builtins.str = ...,
        inputs: collections.abc.Iterable[global___ModelMetadataResponse.TensorMetadata] | None = ...,
        outputs: collections.abc.Iterable[global___ModelMetadataResponse.TensorMetadata] | None = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["inputs", b"inputs", "name", b"name", "outputs", b"outputs", "platform", b"platform", "versions", b"versions"]) -> None: ...

global___ModelMetadataResponse = ModelMetadataResponse

@typing.final
class ModelInferRequest(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    @typing.final
    class InferInputTensor(google.protobuf.message.Message):
        """An input tensor for an inference request."""

        DESCRIPTOR: google.protobuf.descriptor.Descriptor

        @typing.final
        class ParametersEntry(google.protobuf.message.Message):
            DESCRIPTOR: google.protobuf.descriptor.Descriptor

            KEY_FIELD_NUMBER: builtins.int
            VALUE_FIELD_NUMBER: builtins.int
            key: builtins.str
            @property
            def value(self) -> global___InferParameter: ...
            def __init__(
                self,
                *,
                key: builtins.str = ...,
                value: global___InferParameter | None = ...,
            ) -> None: ...
            def HasField(self, field_name: typing.Literal["value", b"value"]) -> builtins.bool: ...
            def ClearField(self, field_name: typing.Literal["key", b"key", "value", b"value"]) -> None: ...

        NAME_FIELD_NUMBER: builtins.int
        DATATYPE_FIELD_NUMBER: builtins.int
        SHAPE_FIELD_NUMBER: builtins.int
        PARAMETERS_FIELD_NUMBER: builtins.int
        CONTENTS_FIELD_NUMBER: builtins.int
        name: builtins.str
        """The tensor name."""
        datatype: builtins.str
        """The tensor data type."""
        @property
        def shape(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.int]:
            """The tensor shape."""

        @property
        def parameters(self) -> google.protobuf.internal.containers.MessageMap[builtins.str, global___InferParameter]:
            """Optional inference input tensor parameters."""

        @property
        def contents(self) -> global___InferTensorContents:
            """The tensor contents using a data-type format. This field must
            not be specified if "raw" tensor contents are being used for
            the inference request.
            """

        def __init__(
            self,
            *,
            name: builtins.str = ...,
            datatype: builtins.str = ...,
            shape: collections.abc.Iterable[builtins.int] | None = ...,
            parameters: collections.abc.Mapping[builtins.str, global___InferParameter] | None = ...,
            contents: global___InferTensorContents | None = ...,
        ) -> None: ...
        def HasField(self, field_name: typing.Literal["contents", b"contents"]) -> builtins.bool: ...
        def ClearField(self, field_name: typing.Literal["contents", b"contents", "datatype", b"datatype", "name", b"name", "parameters", b"parameters", "shape", b"shape"]) -> None: ...

    @typing.final
    class InferRequestedOutputTensor(google.protobuf.message.Message):
        """An output tensor requested for an inference request."""

        DESCRIPTOR: google.protobuf.descriptor.Descriptor

        @typing.final
        class ParametersEntry(google.protobuf.message.Message):
            DESCRIPTOR: google.protobuf.descriptor.Descriptor

            KEY_FIELD_NUMBER: builtins.int
            VALUE_FIELD_NUMBER: builtins.int
            key: builtins.str
            @property
            def value(self) -> global___InferParameter: ...
            def __init__(
                self,
                *,
                key: builtins.str = ...,
                value: global___InferParameter | None = ...,
            ) -> None: ...
            def HasField(self, field_name: typing.Literal["value", b"value"]) -> builtins.bool: ...
            def ClearField(self, field_name: typing.Literal["key", b"key", "value", b"value"]) -> None: ...

        NAME_FIELD_NUMBER: builtins.int
        PARAMETERS_FIELD_NUMBER: builtins.int
        name: builtins.str
        """The tensor name."""
        @property
        def parameters(self) -> google.protobuf.internal.containers.MessageMap[builtins.str, global___InferParameter]:
            """Optional requested output tensor parameters."""

        def __init__(
            self,
            *,
            name: builtins.str = ...,
            parameters: collections.abc.Mapping[builtins.str, global___InferParameter] | None = ...,
        ) -> None: ...
        def ClearField(self, field_name: typing.Literal["name", b"name", "parameters", b"parameters"]) -> None: ...

    @typing.final
    class ParametersEntry(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor

        KEY_FIELD_NUMBER: builtins.int
        VALUE_FIELD_NUMBER: builtins.int
        key: builtins.str
        @property
        def value(self) -> global___InferParameter: ...
        def __init__(
            self,
            *,
            key: builtins.str = ...,
            value: global___InferParameter | None = ...,
        ) -> None: ...
        def HasField(self, field_name: typing.Literal["value", b"value"]) -> builtins.bool: ...
        def ClearField(self, field_name: typing.Literal["key", b"key", "value", b"value"]) -> None: ...

    MODEL_NAME_FIELD_NUMBER: builtins.int
    MODEL_VERSION_FIELD_NUMBER: builtins.int
    ID_FIELD_NUMBER: builtins.int
    PARAMETERS_FIELD_NUMBER: builtins.int
    INPUTS_FIELD_NUMBER: builtins.int
    OUTPUTS_FIELD_NUMBER: builtins.int
    RAW_INPUT_CONTENTS_FIELD_NUMBER: builtins.int
    model_name: builtins.str
    """The name of the model to use for inferencing."""
    model_version: builtins.str
    """The version of the model to use for inference. If not given the
    server will choose a version based on the model and internal policy.
    """
    id: builtins.str
    """Optional identifier for the request. If specified will be
    returned in the response.
    """
    @property
    def parameters(self) -> google.protobuf.internal.containers.MessageMap[builtins.str, global___InferParameter]:
        """Optional inference parameters."""

    @property
    def inputs(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___ModelInferRequest.InferInputTensor]:
        """The input tensors for the inference."""

    @property
    def outputs(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___ModelInferRequest.InferRequestedOutputTensor]:
        """The requested output tensors for the inference. Optional, if not
        specified all outputs produced by the model will be returned.
        """

    @property
    def raw_input_contents(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.bytes]:
        """The data contained in an input tensor can be represented in "raw"
        bytes form or in the repeated type that matches the tensor's data
        type. To use the raw representation 'raw_input_contents' must be
        initialized with data for each tensor in the same order as
        'inputs'. For each tensor, the size of this content must match
        what is expected by the tensor's shape and data type. The raw
        data must be the flattened, one-dimensional, row-major order of
        the tensor elements without any stride or padding between the
        elements. Note that the FP16 and BF16 data types must be represented as
        raw content as there is no specific data type for a 16-bit float type.

        If this field is specified then InferInputTensor::contents must
        not be specified for any input tensor.
        """

    def __init__(
        self,
        *,
        model_name: builtins.str = ...,
        model_version: builtins.str = ...,
        id: builtins.str = ...,
        parameters: collections.abc.Mapping[builtins.str, global___InferParameter] | None = ...,
        inputs: collections.abc.Iterable[global___ModelInferRequest.InferInputTensor] | None = ...,
        outputs: collections.abc.Iterable[global___ModelInferRequest.InferRequestedOutputTensor] | None = ...,
        raw_input_contents: collections.abc.Iterable[builtins.bytes] | None = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["id", b"id", "inputs", b"inputs", "model_name", b"model_name", "model_version", b"model_version", "outputs", b"outputs", "parameters", b"parameters", "raw_input_contents", b"raw_input_contents"]) -> None: ...

global___ModelInferRequest = ModelInferRequest

@typing.final
class ModelInferResponse(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    @typing.final
    class InferOutputTensor(google.protobuf.message.Message):
        """An output tensor returned for an inference request."""

        DESCRIPTOR: google.protobuf.descriptor.Descriptor

        @typing.final
        class ParametersEntry(google.protobuf.message.Message):
            DESCRIPTOR: google.protobuf.descriptor.Descriptor

            KEY_FIELD_NUMBER: builtins.int
            VALUE_FIELD_NUMBER: builtins.int
            key: builtins.str
            @property
            def value(self) -> global___InferParameter: ...
            def __init__(
                self,
                *,
                key: builtins.str = ...,
                value: global___InferParameter | None = ...,
            ) -> None: ...
            def HasField(self, field_name: typing.Literal["value", b"value"]) -> builtins.bool: ...
            def ClearField(self, field_name: typing.Literal["key", b"key", "value", b"value"]) -> None: ...

        NAME_FIELD_NUMBER: builtins.int
        DATATYPE_FIELD_NUMBER: builtins.int
        SHAPE_FIELD_NUMBER: builtins.int
        PARAMETERS_FIELD_NUMBER: builtins.int
        CONTENTS_FIELD_NUMBER: builtins.int
        name: builtins.str
        """The tensor name."""
        datatype: builtins.str
        """The tensor data type."""
        @property
        def shape(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.int]:
            """The tensor shape."""

        @property
        def parameters(self) -> google.protobuf.internal.containers.MessageMap[builtins.str, global___InferParameter]:
            """Optional output tensor parameters."""

        @property
        def contents(self) -> global___InferTensorContents:
            """The tensor contents using a data-type format. This field must
            not be specified if "raw" tensor contents are being used for
            the inference response.
            """

        def __init__(
            self,
            *,
            name: builtins.str = ...,
            datatype: builtins.str = ...,
            shape: collections.abc.Iterable[builtins.int] | None = ...,
            parameters: collections.abc.Mapping[builtins.str, global___InferParameter] | None = ...,
            contents: global___InferTensorContents | None = ...,
        ) -> None: ...
        def HasField(self, field_name: typing.Literal["contents", b"contents"]) -> builtins.bool: ...
        def ClearField(self, field_name: typing.Literal["contents", b"contents", "datatype", b"datatype", "name", b"name", "parameters", b"parameters", "shape", b"shape"]) -> None: ...

    @typing.final
    class ParametersEntry(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor

        KEY_FIELD_NUMBER: builtins.int
        VALUE_FIELD_NUMBER: builtins.int
        key: builtins.str
        @property
        def value(self) -> global___InferParameter: ...
        def __init__(
            self,
            *,
            key: builtins.str = ...,
            value: global___InferParameter | None = ...,
        ) -> None: ...
        def HasField(self, field_name: typing.Literal["value", b"value"]) -> builtins.bool: ...
        def ClearField(self, field_name: typing.Literal["key", b"key", "value", b"value"]) -> None: ...

    MODEL_NAME_FIELD_NUMBER: builtins.int
    MODEL_VERSION_FIELD_NUMBER: builtins.int
    ID_FIELD_NUMBER: builtins.int
    PARAMETERS_FIELD_NUMBER: builtins.int
    OUTPUTS_FIELD_NUMBER: builtins.int
    RAW_OUTPUT_CONTENTS_FIELD_NUMBER: builtins.int
    model_name: builtins.str
    """The name of the model used for inference."""
    model_version: builtins.str
    """The version of the model used for inference."""
    id: builtins.str
    """The id of the inference request if one was specified."""
    @property
    def parameters(self) -> google.protobuf.internal.containers.MessageMap[builtins.str, global___InferParameter]:
        """Optional inference response parameters."""

    @property
    def outputs(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___ModelInferResponse.InferOutputTensor]:
        """The output tensors holding inference results."""

    @property
    def raw_output_contents(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.bytes]:
        """The data contained in an output tensor can be represented in
        "raw" bytes form or in the repeated type that matches the
        tensor's data type. To use the raw representation 'raw_output_contents'
        must be initialized with data for each tensor in the same order as
        'outputs'. For each tensor, the size of this content must match
        what is expected by the tensor's shape and data type. The raw
        data must be the flattened, one-dimensional, row-major order of
        the tensor elements without any stride or padding between the
        elements. Note that the FP16 and BF16 data types must be represented as
        raw content as there is no specific data type for a 16-bit float type.

        If this field is specified then InferOutputTensor::contents must
        not be specified for any output tensor.
        """

    def __init__(
        self,
        *,
        model_name: builtins.str = ...,
        model_version: builtins.str = ...,
        id: builtins.str = ...,
        parameters: collections.abc.Mapping[builtins.str, global___InferParameter] | None = ...,
        outputs: collections.abc.Iterable[global___ModelInferResponse.InferOutputTensor] | None = ...,
        raw_output_contents: collections.abc.Iterable[builtins.bytes] | None = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["id", b"id", "model_name", b"model_name", "model_version", b"model_version", "outputs", b"outputs", "parameters", b"parameters", "raw_output_contents", b"raw_output_contents"]) -> None: ...

global___ModelInferResponse = ModelInferResponse

@typing.final
class InferParameter(google.protobuf.message.Message):
    """An inference parameter value. The Parameters message describes a 
    “name”/”value” pair, where the “name” is the name of the parameter
    and the “value” is a boolean, integer, or string corresponding to 
    the parameter.
    """

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    BOOL_PARAM_FIELD_NUMBER: builtins.int
    INT64_PARAM_FIELD_NUMBER: builtins.int
    STRING_PARAM_FIELD_NUMBER: builtins.int
    bool_param: builtins.bool
    """A boolean parameter value."""
    int64_param: builtins.int
    """An int64 parameter value."""
    string_param: builtins.str
    """A string parameter value."""
    def __init__(
        self,
        *,
        bool_param: builtins.bool = ...,
        int64_param: builtins.int = ...,
        string_param: builtins.str = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["bool_param", b"bool_param", "int64_param", b"int64_param", "parameter_choice", b"parameter_choice", "string_param", b"string_param"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["bool_param", b"bool_param", "int64_param", b"int64_param", "parameter_choice", b"parameter_choice", "string_param", b"string_param"]) -> None: ...
    def WhichOneof(self, oneof_group: typing.Literal["parameter_choice", b"parameter_choice"]) -> typing.Literal["bool_param", "int64_param", "string_param"] | None: ...

global___InferParameter = InferParameter

@typing.final
class InferTensorContents(google.protobuf.message.Message):
    """The data contained in a tensor represented by the repeated type
    that matches the tensor's data type. Protobuf oneof is not used
    because oneofs cannot contain repeated fields.
    """

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    BOOL_CONTENTS_FIELD_NUMBER: builtins.int
    INT_CONTENTS_FIELD_NUMBER: builtins.int
    INT64_CONTENTS_FIELD_NUMBER: builtins.int
    UINT_CONTENTS_FIELD_NUMBER: builtins.int
    UINT64_CONTENTS_FIELD_NUMBER: builtins.int
    FP32_CONTENTS_FIELD_NUMBER: builtins.int
    FP64_CONTENTS_FIELD_NUMBER: builtins.int
    BYTES_CONTENTS_FIELD_NUMBER: builtins.int
    @property
    def bool_contents(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.bool]:
        """Representation for BOOL data type. The size must match what is
        expected by the tensor's shape. The contents must be the flattened,
        one-dimensional, row-major order of the tensor elements.
        """

    @property
    def int_contents(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.int]:
        """Representation for INT8, INT16, and INT32 data types. The size
        must match what is expected by the tensor's shape. The contents
        must be the flattened, one-dimensional, row-major order of the
        tensor elements.
        """

    @property
    def int64_contents(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.int]:
        """Representation for INT64 data types. The size must match what
        is expected by the tensor's shape. The contents must be the
        flattened, one-dimensional, row-major order of the tensor elements.
        """

    @property
    def uint_contents(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.int]:
        """Representation for UINT8, UINT16, and UINT32 data types. The size
        must match what is expected by the tensor's shape. The contents
        must be the flattened, one-dimensional, row-major order of the
        tensor elements.
        """

    @property
    def uint64_contents(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.int]:
        """Representation for UINT64 data types. The size must match what
        is expected by the tensor's shape. The contents must be the
        flattened, one-dimensional, row-major order of the tensor elements.
        """

    @property
    def fp32_contents(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.float]:
        """Representation for FP32 data type. The size must match what is
        expected by the tensor's shape. The contents must be the flattened,
        one-dimensional, row-major order of the tensor elements.
        """

    @property
    def fp64_contents(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.float]:
        """Representation for FP64 data type. The size must match what is
        expected by the tensor's shape. The contents must be the flattened,
        one-dimensional, row-major order of the tensor elements.
        """

    @property
    def bytes_contents(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.bytes]:
        """Representation for BYTES data type. The size must match what is
        expected by the tensor's shape. The contents must be the flattened,
        one-dimensional, row-major order of the tensor elements.
        """

    def __init__(
        self,
        *,
        bool_contents: collections.abc.Iterable[builtins.bool] | None = ...,
        int_contents: collections.abc.Iterable[builtins.int] | None = ...,
        int64_contents: collections.abc.Iterable[builtins.int] | None = ...,
        uint_contents: collections.abc.Iterable[builtins.int] | None = ...,
        uint64_contents: collections.abc.Iterable[builtins.int] | None = ...,
        fp32_contents: collections.abc.Iterable[builtins.float] | None = ...,
        fp64_contents: collections.abc.Iterable[builtins.float] | None = ...,
        bytes_contents: collections.abc.Iterable[builtins.bytes] | None = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["bool_contents", b"bool_contents", "bytes_contents", b"bytes_contents", "fp32_contents", b"fp32_contents", "fp64_contents", b"fp64_contents", "int64_contents", b"int64_contents", "int_contents", b"int_contents", "uint64_contents", b"uint64_contents", "uint_contents", b"uint_contents"]) -> None: ...

global___InferTensorContents = InferTensorContents

@typing.final
class RepositoryModelLoadRequest(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    MODEL_NAME_FIELD_NUMBER: builtins.int
    model_name: builtins.str
    """The name of the model to load, or reload."""
    def __init__(
        self,
        *,
        model_name: builtins.str = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["model_name", b"model_name"]) -> None: ...

global___RepositoryModelLoadRequest = RepositoryModelLoadRequest

@typing.final
class RepositoryModelLoadResponse(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    MODEL_NAME_FIELD_NUMBER: builtins.int
    ISLOADED_FIELD_NUMBER: builtins.int
    model_name: builtins.str
    """The name of the model trying to load or reload."""
    isLoaded: builtins.bool
    """boolean parameter to indicate whether model is loaded or not"""
    def __init__(
        self,
        *,
        model_name: builtins.str = ...,
        isLoaded: builtins.bool = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["isLoaded", b"isLoaded", "model_name", b"model_name"]) -> None: ...

global___RepositoryModelLoadResponse = RepositoryModelLoadResponse

@typing.final
class RepositoryModelUnloadRequest(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    MODEL_NAME_FIELD_NUMBER: builtins.int
    model_name: builtins.str
    """The name of the model to unload."""
    def __init__(
        self,
        *,
        model_name: builtins.str = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["model_name", b"model_name"]) -> None: ...

global___RepositoryModelUnloadRequest = RepositoryModelUnloadRequest

@typing.final
class RepositoryModelUnloadResponse(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    MODEL_NAME_FIELD_NUMBER: builtins.int
    ISUNLOADED_FIELD_NUMBER: builtins.int
    model_name: builtins.str
    """The name of the model trying to load or reload."""
    isUnloaded: builtins.bool
    """boolean parameter to indicate whether model is unloaded or not"""
    def __init__(
        self,
        *,
        model_name: builtins.str = ...,
        isUnloaded: builtins.bool = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["isUnloaded", b"isUnloaded", "model_name", b"model_name"]) -> None: ...

global___RepositoryModelUnloadResponse = RepositoryModelUnloadResponse
