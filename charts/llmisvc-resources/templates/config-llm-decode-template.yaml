apiVersion: serving.kserve.io/v1alpha1
kind: LLMInferenceServiceConfig
metadata:
  name: kserve-config-llm-decode-template
spec:
  template:
    containers:
      - image: ghcr.io/llm-d/llm-d:v0.2.0
        imagePullPolicy: IfNotPresent
        name: main
        ports:
          - containerPort: 8001
            protocol: TCP
        command:
          - vllm
          - serve
        args:
          - --served-model-name
          - "{{ .Spec.Model.Name }}"
          - --port
          - "8001"
          - --disable-log-requests
          - --enable-ssl-refresh
          - --ssl-certfile
          - /etc/ssl/certs/tls.crt
          - --ssl-keyfile
          - /etc/ssl/certs/tls.key
        env:
          - name: HOME
            value: /home
          - name: VLLM_LOGGING_LEVEL
            value: INFO
          - name: HF_HUB_CACHE
            value: /models
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
              - MKNOD
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: FallbackToLogsOnError
        livenessProbe:
          httpGet:
            path: /health
            port: 8001
            scheme: HTTPS
          initialDelaySeconds: 120
          periodSeconds: 10
          timeoutSeconds: 10
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /health
            port: 8001
            scheme: HTTPS
          initialDelaySeconds: 10
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 60
        volumeMounts:
          - mountPath: /home
            name: home
          - mountPath: /dev/shm
            name: dshm
          - mountPath: /models
            name: model-cache
          - mountPath: /etc/ssl/certs
            name: tls-certs
            readOnly: true
    initContainers:
      - name: llm-d-routing-sidecar
        imagePullPolicy: IfNotPresent
        image: ghcr.io/llm-d/llm-d-routing-sidecar:v0.2.0
        restartPolicy: Always
        ports:
          - containerPort: 8000
            protocol: TCP
        resources: { }
        securityContext: { }
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: FallbackToLogsOnError
        livenessProbe:
          httpGet:
            path: /health
            port: 8000
            scheme: HTTPS
          initialDelaySeconds: 10
          periodSeconds: 10
          timeoutSeconds: 10
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /health
            port: 8000
            scheme: HTTPS
          initialDelaySeconds: 10
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 10
        args:
          - "--port=8000"
          - "--vllm-port=8001"
          - "--secure-proxy=true"
          - "--cert-path=/etc/ssl/certs"
          - "--decoder-use-tls=true"
          - "--decoder-tls-insecure-skip-verify=true"
          - "--prefiller-use-tls=true"
          - "--prefiller-tls-insecure-skip-verify=true"
          - "--enable-ssrf-protection=true"
        volumeMounts:
          - mountPath: /etc/ssl/certs
            name: tls-certs
            readOnly: true
        env:
          - name: INFERENCE_POOL_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
    terminationGracePeriodSeconds: 30
    volumes:
      - emptyDir: { }
        name: home
      - emptyDir:
          medium: Memory
          sizeLimit: 1Gi
        name: dshm
      - emptyDir: { }
        name: model-cache
      - name: tls-certs
        secret:
          secretName: "{{ ChildName .ObjectMeta.Name `-kserve-self-signed-certs` }}"