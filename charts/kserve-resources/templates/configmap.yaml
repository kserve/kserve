---
apiVersion: v1
data:
  config-defaults.yaml: |
    podsPerRuntime: {{ .Values.kserve.modelmesh.config.podPerRuntime }}
    headlessService: true
    modelMeshImage:
      name: {{ .Values.kserve.modelmesh.config.modelmeshImage }}
      tag: {{ .Values.kserve.modelmesh.config.modelmeshImageTag }}
    modelMeshResources:
      requests:
        cpu: "300m"
        memory: "448Mi"
      limits:
        cpu: "3"
        memory: "448Mi"
    restProxy:
      enabled: true
      port: 8008
      image:
        name: {{ .Values.kserve.modelmesh.config.restProxyImage }}
        tag: {{ .Values.kserve.modelmesh.config.restProxyImageTag }}
      resources:
        requests:
          cpu: "50m"
          memory: "96Mi"
        limits:
          cpu: "1"
          memory: "512Mi"
    storageHelperImage:
      name: {{ .Values.kserve.modelmesh.config.modelmeshRuntimeAdapterImage }}
      tag: {{ .Values.kserve.modelmesh.config.modelmeshRuntimeAdapterImageTag }}
      command: ["/opt/app/puller"]
    storageHelperResources:
      requests:
        cpu: "50m"
        memory: "96Mi"
      limits:
        cpu: "2"
        memory: "512Mi"
    serviceAccountName: ""
    metrics:
      enabled: true
    builtInServerTypes:
      - triton
      - mlserver
      - ovms
      - torchserve
kind: ConfigMap
metadata:
  labels:
    app.kubernetes.io/instance: modelmesh-controller
    app.kubernetes.io/managed-by: modelmesh-controller
    app.kubernetes.io/name: modelmesh-controller
  name: model-serving-config-defaults
---
apiVersion: v1
data:
  agent: |-
    {
        "image" : "{{ .Values.kserve.agent.image }}:{{ .Values.kserve.agent.tag }}",
        "memoryRequest": "100Mi",
        "memoryLimit": "1Gi",
        "cpuRequest": "100m",
        "cpuLimit": "1"
    }
  batcher: |-
    {
        "image" : "{{ .Values.kserve.agent.image }}:{{ .Values.kserve.agent.tag }}",
        "memoryRequest": "1Gi",
        "memoryLimit": "1Gi",
        "cpuRequest": "1",
        "cpuLimit": "1"
    }
  credentials: |-
    {
       "gcs": {
           "gcsCredentialFileName": "gcloud-application-credentials.json"
       },
       "s3": {
           "s3AccessKeyIDName": "{{ .Values.kserve.storage.s3.accessKeyIdName }}",
           "s3SecretAccessKeyName": "{{ .Values.kserve.storage.s3.secretAccessKeyName }}"
       }
    }
  deploy: |-
    {
      "defaultDeploymentMode": "{{ .Values.kserve.controller.deploymentMode }}"
    }
  explainers: |-
    {
        "alibi": {
            "image" : "{{ .Values.kserve.servingruntime.alibi.image }}",
            "defaultImageVersion": "{{ .Values.kserve.servingruntime.alibi.defaultVersion }}"
        },
        "art": {
            "image" : "{{ .Values.kserve.servingruntime.art.image }}",
            "defaultImageVersion": "{{ .Values.kserve.servingruntime.art.defaultVersion }}"
        }
    }
  ingress: |-
    {
        "ingressGateway" : "{{ .Values.kserve.controller.gateway.ingressGateway.gateway }}",
        "ingressService" : "{{ .Values.kserve.controller.gateway.ingressGateway.gatewayService }}",
        "localGateway" : "{{ .Values.kserve.controller.gateway.localGateway.gateway }}",
        "localGatewayService" : "{{ .Values.kserve.controller.gateway.localGateway.gatewayService }}",
        "ingressClassName" : "{{ .Values.kserve.controller.gateway.ingressGateway.className }}",
        "ingressDomain"  : "{{ .Values.kserve.controller.gateway.domain }}",
        "domainTemplate": "{{ .Values.kserve.controller.gateway.domainTemplate }}",
        "urlScheme": "{{ .Values.kserve.controller.gateway.urlScheme }}"
    }
  logger: |-
    {
        "image" : "{{ .Values.kserve.agent.image }}:{{ .Values.kserve.agent.tag }}",
        "memoryRequest": "100Mi",
        "memoryLimit": "1Gi",
        "cpuRequest": "100m",
        "cpuLimit": "1",
        "defaultUrl": "http://default-broker"
    }
  storageInitializer: |-
    {
        "image" : "{{ .Values.kserve.storage.image }}:{{ .Values.kserve.storage.tag }}",
        "memoryRequest": "100Mi",
        "memoryLimit": "1Gi",
        "cpuRequest": "100m",
        "cpuLimit": "1"
    }
  metricsAggregator: |-
    {
      "enableMetricAggregation": "{{ .Values.kserve.metricsaggregator.enableMetricAggregation }}",
      "enablePrometheusScraping" : "{{ .Values.kserve.metricsaggregator.enablePrometheusScraping }}"
    }
kind: ConfigMap
metadata:
  name: inferenceservice-config
  namespace: {{ .Release.Namespace }}
