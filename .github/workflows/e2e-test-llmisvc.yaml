name: LLMInferenceService E2E Tests

on:
  pull_request:
    paths:
      - "pkg/apis/serving/v1alpha1/llm*"
      - "pkg/controller/v1alpha1/llmisvc/**"
      - "config/llmisvc/**"
      - "config/rbac/llmisvc/**"
      - "cmd/llmisvc/**"
      - "test/e2e/llmisvc/**"
      - ".github/workflows/e2e-test-llmisvc.yaml"

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  DOCKER_IMAGES_PATH: /mnt/docker-images
  DOCKER_REPO: kserve
  BASE_ARTIFACT_PREFIX: kserve-controller
  LLMISVC_CONTROLLER_IMG: llmisvc-controller
  STORAGE_INIT_IMG: storage-initializer

jobs:
  test-llmisvc:
    runs-on: ubuntu-latest
    needs: [kserve-image-build]
    steps:
      - name: Checkout source
        uses: actions/checkout@v4

      - name: Free-up disk space
        uses: ./.github/actions/free-up-disk-space

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version-file: go.mod

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.9"

      - name: Setup Minikube
        uses: ./.github/actions/minikube-setup
        with:
          addons: metallb

      - name: KServe dependency setup
        uses: ./.github/actions/kserve-dep-setup
        with:
          deployment-mode: "raw"
          network-layer: "istio-gatewayapi"

      - name: Download base images
        uses: ./.github/actions/base-download

      - name: Download LLM controller and storage initializer images
        uses: actions/download-artifact@v4
        with:
          path: ./tmp
          pattern: ${{ env.BASE_ARTIFACT_PREFIX }}-*
          merge-multiple: true

      - name: Load docker images
        uses: ./.github/actions/load-docker-images
        with:
          directory: ./tmp

      - name: Setup UV
        run: ./test/scripts/gh-actions/setup-uv.sh

      - name: Install KServe with LLM controller
        run: |
          echo "üèóÔ∏è Installing KServe base components (without main controller)..."

          # Replicate make deploy-ci but skip the main controller wait
          make manifests
          kubectl apply --server-side=true --force-conflicts -k config/crd
          kubectl wait --for=condition=established --timeout=60s crd/llminferenceserviceconfigs.serving.kserve.io
          kubectl apply --server-side=true -k config/overlays/test
          # Skip: kubectl wait --for=condition=ready pod -l control-plane=kserve-controller-manager -n kserve --timeout=300s
          kubectl apply --server-side=true -k config/overlays/test/clusterresources

          echo "üîÑ Installing LLM controller instead of main controller..."
          helm install llmisvc ./charts/llmisvc-resources \
            --namespace kserve \
            --set kserve.llmisvc.controller.image="${DOCKER_REPO}/${LLMISVC_CONTROLLER_IMG}" \
            --set kserve.llmisvc.controller.tag="${GITHUB_SHA}" \
            --set kserve.llmisvc.controller.imagePullPolicy="Never" \
            --wait --timeout=300s

          echo "‚è≥ Waiting for LLM controller to be ready..."
          kubectl wait --for=condition=ready pod -l control-plane=kserve-llmisvc-controller-manager -n kserve --timeout=300s

          echo "‚úÖ KServe with LLM controller installation complete!"

      - name: Run E2E tests
        timeout-minutes: 30
        run: |
          # Run only CPU tests for now using pytest markers (cluster_)
          # Available GPU vendors: amd, nvidia, intel
          ./test/scripts/gh-actions/run-e2e-tests.sh "llminferenceservice and cluster_cpu" 2 "istio-gatewayapi-ext"

      - name: Check system status
        if: always()
        run: |
          ./test/scripts/gh-actions/status-check.sh

  kserve-image-build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout source
        uses: actions/checkout@v4

      - name: Setup QEMU
        uses: docker/setup-qemu-action@v3

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build LLM images
        run: |
          sudo mkdir -p ${{ env.DOCKER_IMAGES_PATH }}
          sudo chown -R $USER ${{ env.DOCKER_IMAGES_PATH }}
          ./test/scripts/gh-actions/build-llm-images.sh
          docker image ls
          sudo ls -lh ${{ env.DOCKER_IMAGES_PATH }}

      - name: Upload LLM controller image
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.BASE_ARTIFACT_PREFIX }}-${{ env.LLMISVC_CONTROLLER_IMG }}-${{ github.sha }}
          path: ${{ env.DOCKER_IMAGES_PATH }}/${{ env.LLMISVC_CONTROLLER_IMG }}-${{ github.sha }}
          compression-level: 0
          if-no-files-found: error

      - name: Upload storage initializer image
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.BASE_ARTIFACT_PREFIX }}-${{ env.STORAGE_INIT_IMG }}-${{ github.sha }}
          path: ${{ env.DOCKER_IMAGES_PATH }}/${{ env.STORAGE_INIT_IMG }}-${{ github.sha }}
          compression-level: 0
          if-no-files-found: error
