name: LLMInferenceService E2E Tests

on:
  pull_request:
    paths:
      - "pkg/apis/serving/v1alpha1/llm*"
      - "pkg/controller/v1alpha1/llmisvc/**"
      - "config/llmisvc/**"
      - "config/rbac/llmisvc/**"
      - "cmd/llmisvc/**"
      - "test/e2e/llmisvc/**"
      - ".github/workflows/e2e-test-llmisvc.yaml"

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  DOCKER_IMAGES_PATH: "/mnt/docker-images"
  DOCKER_REPO: "kserve"
  # artifact prefixes for bulk download
  PREDICTOR_ARTIFACT_PREFIX: "pred"
  EXPLAINER_ARTIFACT_PREFIX: "exp"
  TRANSFORMER_ARTIFACT_PREFIX: "trans"
  GRAPH_ARTIFACT_PREFIX: "graph"
  BASE_ARTIFACT_PREFIX: "base"
  # Controller images
  CONTROLLER_IMG: "kserve-controller"
  LOCALMODEL_CONTROLLER_IMG: "kserve-localmodel-controller"
  LOCALMODEL_AGENT_IMG: "kserve-localmodelnode-agent"
  STORAGE_INIT_IMG: "storage-initializer"
  AGENT_IMG: "agent"
  ROUTER_IMG: "router"
  # LLM-specific images
  LLMISVC_CONTROLLER_IMG: "llmisvc-controller"

jobs:
  test-llmisvc:
    runs-on: ubuntu-latest
    needs: [kserve-image-build]
    steps:
      - name: Checkout source
        uses: actions/checkout@v4

      - name: Free-up disk space
        uses: ./.github/actions/free-up-disk-space

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version-file: go.mod

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.9"

      - name: Setup Minikube
        uses: ./.github/actions/minikube-setup
        with:
          addons: metallb

      - name: KServe dependency setup
        uses: ./.github/actions/kserve-dep-setup
        with:
          deployment-mode: "raw"
          network-layer: "istio-gatewayapi"

      - name: Download base images
        uses: ./.github/actions/base-download

      - name: Download KServe and LLM controller images
        uses: actions/download-artifact@v4
        with:
          path: ./tmp
          pattern: ${{ env.BASE_ARTIFACT_PREFIX }}-*
          merge-multiple: true

      - name: Load docker images
        uses: ./.github/actions/load-docker-images
        with:
          directory: ./tmp

      - name: Setup UV
        run: ./test/scripts/gh-actions/setup-uv.sh

      - name: Install KServe and LLM controller
        run: |
          echo "üèóÔ∏è Installing complete KServe system with LLM controller using built images..."
          # Set image tags to use our built images
          export CONTROLLER_IMG_TAG="${DOCKER_REPO}/${CONTROLLER_IMG}:${GITHUB_SHA}"
          export LOCALMODEL_CONTROLLER_IMG_TAG="${DOCKER_REPO}/${LOCALMODEL_CONTROLLER_IMG}:${GITHUB_SHA}"
          export LOCALMODEL_AGENT_IMG_TAG="${DOCKER_REPO}/${LOCALMODEL_AGENT_IMG}:${GITHUB_SHA}"
          export LLMISVC_CONTROLLER_IMG_TAG="${DOCKER_REPO}/${LLMISVC_CONTROLLER_IMG}:${GITHUB_SHA}"

          echo "Image tags being used:"
          echo "CONTROLLER_IMG_TAG=$CONTROLLER_IMG_TAG"
          echo "LOCALMODEL_CONTROLLER_IMG_TAG=$LOCALMODEL_CONTROLLER_IMG_TAG"
          echo "LOCALMODEL_AGENT_IMG_TAG=$LOCALMODEL_AGENT_IMG_TAG"
          echo "LLMISVC_CONTROLLER_IMG_TAG=$LLMISVC_CONTROLLER_IMG_TAG"

          echo "üìã Checking available Docker images..."
          docker images | grep -E "(kserve|llmisvc)" | head -10

          # Deploy everything including LLM controller (make deploy-ci now includes LLM controller deployment)
          make deploy-ci

          echo "‚è≥ Waiting for main KServe controller to be ready..."
          kubectl wait --for=condition=ready pod -l control-plane=kserve-controller-manager -n kserve --timeout=300s

          echo "üîç Verifying LLM controller image is available..."
          if ! docker images | grep -q "$LLMISVC_CONTROLLER_IMG_TAG"; then
            echo "‚ùå LLM controller image $LLMISVC_CONTROLLER_IMG_TAG not found!"
            echo "Available images:"
            docker images | grep llmisvc || echo "No llmisvc images found"
            exit 1
          fi
          echo "‚úÖ LLM controller image $LLMISVC_CONTROLLER_IMG_TAG is available"

          echo "üìã Checking initial LLM controller deployment state..."
          kubectl get deployment kserve-llmisvc-controller-manager -n kserve -o jsonpath='{.spec.template.spec.containers[0].image}'
          echo ""
          kubectl get pods -n kserve -l control-plane=kserve-llmisvc-controller-manager -o wide

          echo "üîß Patching LLM controller deployment with correct image tag and volume mount..."
          kubectl patch deployment kserve-llmisvc-controller-manager -n kserve --type='merge' -p="{
            \"spec\": {
              \"template\": {
                \"spec\": {
                  \"containers\": [{
                    \"name\": \"manager\",
                    \"image\": \"$LLMISVC_CONTROLLER_IMG_TAG\",
                    \"imagePullPolicy\": \"Never\",
                    \"volumeMounts\": [{
                      \"mountPath\": \"/tmp/k8s-webhook-server/serving-certs\",
                      \"name\": \"cert\",
                      \"readOnly\": true
                    }]
                  }]
                }
              }
            }
          }"

          echo "üìã Checking LLM controller deployment status..."
          kubectl get deployment kserve-llmisvc-controller-manager -n kserve -o wide

          echo "üìã Checking LLM controller pod status..."
          kubectl get pods -n kserve -l control-plane=kserve-llmisvc-controller-manager -o wide

          echo "üìã Waiting for deployment rollout to complete..."
          kubectl rollout status deployment/kserve-llmisvc-controller-manager -n kserve --timeout=120s

          echo "‚è≥ Waiting for LLM controller to be ready (with detailed monitoring)..."
          # Wait with shorter timeout and better error reporting
          if ! kubectl wait --for=condition=ready pod -l control-plane=kserve-llmisvc-controller-manager -n kserve --timeout=180s; then
            echo "‚ùå LLM controller failed to become ready. Debugging..."
            echo "üìã Pod status:"
            kubectl get pods -n kserve -l control-plane=kserve-llmisvc-controller-manager -o wide
            echo "üìã Pod events:"
            kubectl get events -n kserve --field-selector involvedObject.kind=Pod --sort-by='.lastTimestamp' | tail -20
            echo "üìã Pod logs:"
            kubectl logs -n kserve -l control-plane=kserve-llmisvc-controller-manager --tail=50 || true
            echo "üìã Deployment status:"
            kubectl describe deployment kserve-llmisvc-controller-manager -n kserve
            exit 1
          fi

          echo "üîß Updating webhook configurations to point to LLM controller..."
          kubectl patch validatingwebhookconfiguration llminferenceserviceconfig.serving.kserve.io --type='json' -p='[{"op": "replace", "path": "/webhooks/0/clientConfig/service/name", "value": "kserve-llmisvc-controller-manager-service"}]'
          kubectl patch validatingwebhookconfiguration llminferenceservice.serving.kserve.io --type='json' -p='[{"op": "replace", "path": "/webhooks/0/clientConfig/service/name", "value": "kserve-llmisvc-controller-manager-service"}]'

          echo "üîß Updating webhook CA bundles..."
          LLM_CA_BUNDLE=$(kubectl get secret kserve-llmisvc-webhook-server-cert -n kserve -o jsonpath='{.data.ca\.crt}')
          kubectl get validatingwebhookconfiguration llminferenceserviceconfig.serving.kserve.io -o json | jq --arg ca_bundle "$LLM_CA_BUNDLE" '.webhooks[0].clientConfig.caBundle = $ca_bundle' | kubectl replace -f -
          kubectl get validatingwebhookconfiguration llminferenceservice.serving.kserve.io -o json | jq --arg ca_bundle "$LLM_CA_BUNDLE" '.webhooks[0].clientConfig.caBundle = $ca_bundle' | kubectl replace -f -

          echo "‚úÖ KServe and LLM controller installation complete!"
          echo "üìã Controllers running:"
          kubectl get pods -n kserve -l control-plane

      - name: Run E2E tests
        timeout-minutes: 30
        run: |
          # Run only CPU tests for now using pytest markers (cluster_)
          # Available GPU vendors: amd, nvidia, intel
          ./test/scripts/gh-actions/run-e2e-tests.sh "llminferenceservice and cluster_cpu" 2 "istio-gatewayapi-ext"

      - name: Check system status
        if: always()
        run: |
          ./test/scripts/gh-actions/status-check.sh

  kserve-image-build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout source
        uses: actions/checkout@v4

      - name: Setup QEMU
        uses: docker/setup-qemu-action@v3

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build KServe and LLM images
        run: |
          sudo mkdir -p ${{ env.DOCKER_IMAGES_PATH }}
          sudo chown -R $USER ${{ env.DOCKER_IMAGES_PATH }}
          # Build all KServe images using the standard script
          ./test/scripts/gh-actions/build-images.sh
          # Build LLM controller image
          echo "Building LLM controller image"
          LLMISVC_CONTROLLER_IMG_TAG=${DOCKER_REPO}/${LLMISVC_CONTROLLER_IMG}:${GITHUB_SHA}
          docker buildx build -f llmisvc-controller.Dockerfile . -t "${LLMISVC_CONTROLLER_IMG_TAG}" \
            -o type=docker,dest="${DOCKER_IMAGES_PATH}/${LLMISVC_CONTROLLER_IMG}-${GITHUB_SHA}",compression-level=0
          docker image ls
          sudo ls -lh ${{ env.DOCKER_IMAGES_PATH }}

      - name: Upload KServe controller image
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.BASE_ARTIFACT_PREFIX }}-${{ env.CONTROLLER_IMG }}-${{ github.sha }}
          path: ${{ env.DOCKER_IMAGES_PATH }}/${{ env.CONTROLLER_IMG }}-${{ github.sha }}
          compression-level: 0
          if-no-files-found: error

      - name: Upload localmodel controller image
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.BASE_ARTIFACT_PREFIX }}-${{ env.LOCALMODEL_CONTROLLER_IMG }}-${{ github.sha }}
          path: ${{ env.DOCKER_IMAGES_PATH }}/${{ env.LOCALMODEL_CONTROLLER_IMG }}-${{ github.sha }}
          compression-level: 0
          if-no-files-found: error

      - name: Upload localmodel agent image
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.BASE_ARTIFACT_PREFIX }}-${{ env.LOCALMODEL_AGENT_IMG }}-${{ github.sha }}
          path: ${{ env.DOCKER_IMAGES_PATH }}/${{ env.LOCALMODEL_AGENT_IMG }}-${{ github.sha }}
          compression-level: 0
          if-no-files-found: error

      - name: Upload LLM controller image
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.BASE_ARTIFACT_PREFIX }}-${{ env.LLMISVC_CONTROLLER_IMG }}-${{ github.sha }}
          path: ${{ env.DOCKER_IMAGES_PATH }}/${{ env.LLMISVC_CONTROLLER_IMG }}-${{ github.sha }}
          compression-level: 0
          if-no-files-found: error

      - name: Upload storage initializer image
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.BASE_ARTIFACT_PREFIX }}-${{ env.STORAGE_INIT_IMG }}-${{ github.sha }}
          path: ${{ env.DOCKER_IMAGES_PATH }}/${{ env.STORAGE_INIT_IMG }}-${{ github.sha }}
          compression-level: 0
          if-no-files-found: error
