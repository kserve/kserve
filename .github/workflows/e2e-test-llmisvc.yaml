name: LLMInferenceService E2E Tests

on:
  pull_request:
    paths:
      - "pkg/apis/serving/v1alpha1/llm*"
      - "pkg/controller/v1alpha1/llmisvc/**"
      - "config/llmisvc/**"
      - "config/rbac/llmisvc/**"
      - "cmd/llmisvc/**"
      - "test/e2e/llmisvc/**"
      - ".github/workflows/e2e-test-llmisvc.yaml"

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  DOCKER_IMAGES_PATH: "/mnt/docker-images"
  DOCKER_REPO: "kserve"
  # artifact prefixes for bulk download
  PREDICTOR_ARTIFACT_PREFIX: "pred"
  EXPLAINER_ARTIFACT_PREFIX: "exp"
  TRANSFORMER_ARTIFACT_PREFIX: "trans"
  GRAPH_ARTIFACT_PREFIX: "graph"
  BASE_ARTIFACT_PREFIX: "base"
  # Controller images
  CONTROLLER_IMG: "kserve-controller"
  LOCALMODEL_CONTROLLER_IMG: "kserve-localmodel-controller"
  LOCALMODEL_AGENT_IMG: "kserve-localmodelnode-agent"
  STORAGE_INIT_IMG: "storage-initializer"
  AGENT_IMG: "agent"
  ROUTER_IMG: "router"
  # LLM-specific images
  LLMISVC_CONTROLLER_IMG: "llmisvc-controller"

jobs:
  test-llmisvc:
    runs-on: ubuntu-latest
    needs: [kserve-image-build]
    steps:
      - name: Checkout source
        uses: actions/checkout@v4

      - name: Free-up disk space
        uses: ./.github/actions/free-up-disk-space

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version-file: go.mod

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.9"

      - name: Setup Minikube
        uses: ./.github/actions/minikube-setup
        with:
          addons: metallb

      - name: KServe dependency setup
        uses: ./.github/actions/kserve-dep-setup
        with:
          deployment-mode: "raw"
          network-layer: "istio-gatewayapi"

      - name: Download base images
        uses: ./.github/actions/base-download

      - name: Download KServe and LLM controller images
        uses: actions/download-artifact@v4
        with:
          path: ./tmp
          pattern: ${{ env.BASE_ARTIFACT_PREFIX }}-*
          merge-multiple: true

      - name: Load docker images
        uses: ./.github/actions/load-docker-images
        with:
          directory: ./tmp

      - name: Install UV
        run: ./test/scripts/gh-actions/setup-uv.sh

      - name: Install KServe with LLM controller
        run: |
          echo "üèóÔ∏è Installing KServe with LLM controller using dedicated setup script..."
          # Use the LLM-specific setup script (includes make deploy-ci-llm + uv sync + Gateway API CRDs)
          ./test/scripts/gh-actions/setup-kserve-llm.sh "raw" "istio-gatewayapi"

          kubectl get pods -n kserve
          kubectl describe pods -n kserve

      - name: Configure LLM controller
        run: |
          echo "üîß Configuring LLM controller using dedicated script..."
          export LLMISVC_CONTROLLER_IMG_TAG="${DOCKER_REPO}/${LLMISVC_CONTROLLER_IMG}:${GITHUB_SHA}"

          # Use the dedicated script for LLM controller configuration (includes webhook fixes + EPP setup)
          ./test/scripts/gh-actions/configure-llmisvc.sh

      - name: Verify LLM setup
        run: |
          echo "üîç Verifying LLM controller setup..."

          echo "üìã KServe Controllers:"
          kubectl get pods -n kserve -l control-plane || true

          echo "üìã LLM Resources:"
          kubectl get llminferenceserviceconfigs -A || true

          echo "üìã Gateway API Resources:"
          kubectl get crd | grep inference || true

          echo "‚úÖ LLM setup verification complete!"

      - name: Run E2E tests
        timeout-minutes: 45
        run: |
          echo "üß™ Running LLM E2E tests with extended timeout..."
          echo "üìã Pre-test system status:"
          kubectl get pods -n kserve
          kubectl get llminferenceserviceconfigs -A
          kubectl get inferencepools -A || echo "No InferencePools yet"

          # Run only CPU tests for now using pytest markers (cluster_)
          # Available GPU vendors: amd, nvidia, intel
          ./test/scripts/gh-actions/run-e2e-tests.sh "llminferenceservice and cluster_cpu" 2 "istio-gatewayapi-ext"

      - name: Check system status
        if: always()
        run: |
          echo "üîç Enhanced LLM system status check..."

          echo "üìã KServe Controllers:"
          kubectl get pods -n kserve -l control-plane || true

          echo "üìã LLM Resources:"
          kubectl get llminferenceservices -A || true
          kubectl get llminferenceserviceconfigs -A || true
          kubectl get inferencepools -A || true
          kubectl get inferencemodels -A || true

          echo "üìã EPP Controllers:"
          kubectl get pods -A -l app | grep epp || echo "No EPP controllers found"

          echo "üìã Gateway API Resources:"
          kubectl get gateways -A || true
          kubectl get httproutes -A || true

          echo "üìã Webhook Configurations:"
          kubectl get validatingwebhookconfiguration | grep llm || true

          echo "üìã Recent Events:"
          kubectl get events -A --sort-by='.lastTimestamp' | tail -20 || true

          # Run standard status check
          ./test/scripts/gh-actions/status-check.sh

  kserve-image-build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout source
        uses: actions/checkout@v4

      - name: Setup QEMU
        uses: docker/setup-qemu-action@v3

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build KServe and LLM images
        run: |
          sudo mkdir -p ${{ env.DOCKER_IMAGES_PATH }}
          sudo chown -R $USER ${{ env.DOCKER_IMAGES_PATH }}
          # Build all KServe images using the standard script
          ./test/scripts/gh-actions/build-images.sh
          # Build LLM controller image
          echo "Building LLM controller image"
          LLMISVC_CONTROLLER_IMG_TAG=${DOCKER_REPO}/${LLMISVC_CONTROLLER_IMG}:${GITHUB_SHA}
          docker buildx build -f llmisvc-controller.Dockerfile . -t "${LLMISVC_CONTROLLER_IMG_TAG}" \
            -o type=docker,dest="${DOCKER_IMAGES_PATH}/${LLMISVC_CONTROLLER_IMG}-${GITHUB_SHA}",compression-level=0
          docker image ls
          sudo ls -lh ${{ env.DOCKER_IMAGES_PATH }}

      - name: Upload KServe controller image
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.BASE_ARTIFACT_PREFIX }}-${{ env.CONTROLLER_IMG }}-${{ github.sha }}
          path: ${{ env.DOCKER_IMAGES_PATH }}/${{ env.CONTROLLER_IMG }}-${{ github.sha }}
          compression-level: 0
          if-no-files-found: error

      - name: Upload localmodel controller image
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.BASE_ARTIFACT_PREFIX }}-${{ env.LOCALMODEL_CONTROLLER_IMG }}-${{ github.sha }}
          path: ${{ env.DOCKER_IMAGES_PATH }}/${{ env.LOCALMODEL_CONTROLLER_IMG }}-${{ github.sha }}
          compression-level: 0
          if-no-files-found: error

      - name: Upload localmodel agent image
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.BASE_ARTIFACT_PREFIX }}-${{ env.LOCALMODEL_AGENT_IMG }}-${{ github.sha }}
          path: ${{ env.DOCKER_IMAGES_PATH }}/${{ env.LOCALMODEL_AGENT_IMG }}-${{ github.sha }}
          compression-level: 0
          if-no-files-found: error

      - name: Upload LLM controller image
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.BASE_ARTIFACT_PREFIX }}-${{ env.LLMISVC_CONTROLLER_IMG }}-${{ github.sha }}
          path: ${{ env.DOCKER_IMAGES_PATH }}/${{ env.LLMISVC_CONTROLLER_IMG }}-${{ github.sha }}
          compression-level: 0
          if-no-files-found: error

      - name: Upload storage initializer image
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.BASE_ARTIFACT_PREFIX }}-${{ env.STORAGE_INIT_IMG }}-${{ github.sha }}
          path: ${{ env.DOCKER_IMAGES_PATH }}/${{ env.STORAGE_INIT_IMG }}-${{ github.sha }}
          compression-level: 0
          if-no-files-found: error
